[{"name":"Affix 固钉","content":"将元素固定在特定区域，一般用于导航栏固钉。","children":[{"name":"API","content":{"offsetTop":{"说明":"距离窗口顶部指定偏移量后触发","类型":"number","默认值":"0","备选值":"''"},"offsetBottom":{"说明":"距离窗口底部指定偏移量后触发","类型":"number","默认值":"null","备选值":"null"},"onPin":{"说明":"触发固定后执行的回调函数","类型":"function","默认值":"null","备选值":"null"},"onUnpin":{"说明":"固定消失后执行的回调函数","类型":"function","默认值":"null","备选值":"null"},"zIndex":{"说明":"固钉的z-index","类型":"number","默认值":"10","备选值":"null"},"className":{"说明":"自定义额外类名","类型":"string","默认值":"`''`","备选值":""},"placeHoldClassName":{"说明":"占位容器的类名","类型":"string","默认值":"`''`","备选值":""},"prefix":{"说明":"自定义前缀","类型":"string","默认值":"`'zent'`","备选值":""}},"info":"如果 `offsetTop` 和 `offsetBottom` 同时设置，优先使用 `offsetBottom`"}]},{"name":"Alert 公告","content":"公告，提供一个醒目的提示信息。","children":[{"name":"使用指南","content":"-  内容文字尽可能精简, 减少阅读障碍。\n-  公告类按钮不要多于两个, 保持逻辑简单。"},{"name":"API","content":{"type":{"说明":"警告提示的样式","类型":"string","默认值":"`'info'`","备选值":"`'info'`, `'warning'`, `'danger'`"},"size":{"说明":"alert 的大小","类型":"string","默认值":"`'normal'`","备选值":"`'normal'`, `'large'`"},"rounded":{"说明":"是否圆角","类型":"bool","默认值":"`false`","备选值":"`true`, `false`"},"closable":{"说明":"是否可以关闭","类型":"bool","默认值":"`false`","备选值":"`true`, `false`"},"onClose":{"说明":"关闭时的回调","类型":"func","默认值":"`noop`","备选值":""},"className":{"说明":"自定义额外类名","类型":"string","默认值":"`''`","备选值":""},"prefix":{"说明":"自定义前缀","类型":"string","默认值":"`'zent'`","备选值":""}}}]},{"name":"Badge 徽标数","content":"徽标数，一般出现在通知图标或头像的右上角，用于显示需要处理的消息条数，通过醒目视觉形式吸引用户处理。","children":[{"name":"使用指南","content":"-  用于提示新的消息，放在文字或者图标右上角或右侧。\n-  可以显示具体消息的条数。"},{"name":"API","content":{"count":{"说明":"消息条数","类型":"int","默认值":"`0`","备选值":""},"maxCount":{"说明":"最大完全显示消息条数","类型":"int","默认值":"`99`","备选值":""},"dot":{"说明":"是否显示为小红点","类型":"bool","默认值":"`false`","备选值":"`true`,`false`"},"showZero":{"说明":"消息数为0时是否显示","类型":"bool","默认值":"`false`","备选值":"`true`,`false`"},"className":{"说明":"自定义额外类名","类型":"string","默认值":"`''`","备选值":""},"prefix":{"说明":"自定义前缀","类型":"string","默认值":"`'zent'`","备选值":""}}}]},{"name":"BlockHeader 标题","content":"这是一个模块标题。","children":[{"name":"API","content":{"prefix":{"说明":"自定义前缀","类型":"string","默认值":"`'zent'`","备选值":""},"className":{"说明":"自定义类名","类型":"string","默认值":"''","备选值":""},"title":{"说明":"标题","类型":"string","默认值":"","备选值":""},"tooltip":{"说明":"pop显示内容","类型":"node","默认值":"","备选值":""},"content":{"说明":"自定义content","类型":"node","默认值":"","备选值":""},"position":{"说明":"pop posotion","类型":"string","默认值":"'top-right'","备选值":""}}}]},{"name":"Breadcrumb 面包屑","content":"面包屑，提供一个有层次的导航结构, 并标明当前位置。","children":[{"name":"使用指南","content":"-   系统拥有超过两级以上的层级结构。\n-   需要告知用户『你在哪里』。\n-   需要向上导航的功能。"},{"name":"API","content":"","children":[{"name":"Breadcrumb","content":{"breads":{"说明":"数据","类型":"array","默认值":"`[]`"},"className":{"说明":"自定义额外类名","类型":"string","默认值":"`''`"},"prefix":{"说明":"自定义前缀","类型":"string","默认值":"`'zent'`"}}},{"name":"Item","content":{"className":{"说明":"自定义额外类名","类型":"string","默认值":"`''`"},"name":{"说明":"内容","类型":"string or React node","默认值":"-"},"href":{"说明":"链接","类型":"string","默认值":"-"}}}]}]},{"name":"Button 按钮","content":"按钮, 提供基础样式及基础状态.","children":[{"name":"使用指南","content":"-   通过 `type` 来控制按钮的样式\n-   通过 `size` 控制按钮的大小.\n-   提供 `'block'`、`'disabled'`、`'loading'` 等修饰状态.\n-   传入 `href/target`, Button 将渲染为a标签, 仍然支持以其他属性控制样式及状态."},{"name":"API","content":{"type":{"说明":"风格","类型":"string","默认值":"`'default'`","备选值":"`'primary'`、`'danger'`、`'success'`"},"size":{"说明":"尺寸","类型":"string","默认值":"`'medium'`","备选值":"`'large'`、`'small'`"},"htmlType":{"说明":"button标签原生type属性","类型":"string","默认值":"`'button'`","备选值":"`submit`、`reset`、`button`"},"block":{"说明":"是否以块级元素的形式展开","类型":"bool","默认值":"`false`","备选值":""},"disabled":{"说明":"状态控制","类型":"bool","默认值":"`false`","备选值":""},"loading":{"说明":"状态控制","类型":"bool","默认值":"`false`","备选值":""},"outline":{"说明":"边框有颜色，内部没有颜色","类型":"bool","默认值":"`false`","备选值":""},"bordered":{"说明":"边框透明控制","类型":"bool","默认值":"`true`","备选值":""},"其他参数":{"说明":"","类型":"","默认值":"","备选值":""},"component":{"说明":"自定义组件标签类型","类型":"string\\","默认值":"func","备选值":"","undefined":""},"href":{"说明":"可选，如果设置的话会用a标签而不是button","类型":"string","默认值":"","备选值":""},"target":{"说明":"可选，和href一起使用，就是a标签的target属性","类型":"string","默认值":"`''`","备选值":"`'_blank'`"},"className":{"说明":"自定义类名","类型":"string","默认值":"","备选值":""},"style":{"说明":"自定style","类型":"object","默认值":"","备选值":""},"prefix":{"说明":"自定义前缀","类型":"string","默认值":"`'zent'`","备选值":""}}}]},{"name":"Card 卡片","content":"用于在卡片容器内展示信息","children":[{"name":"使用指南","content":"-   通过`title`来控制是否显示标题\n-   通过`action`来提供交互操作\n-   通过`bodyStyle`来自定义内容样式"},{"name":"API","content":{"title":{"说明":"标题","类型":"node","默认值":""},"action":{"说明":"操作","类型":"node","默认值":""},"style":{"说明":"卡片容器自定义样式","类型":"object","默认值":"`{}`"},"bodyStyle":{"说明":"内容区域自定义样式","类型":"object","默认值":"`{}`"},"className":{"说明":"自定义额外类名","类型":"string","默认值":"`''`"},"prefix":{"说明":"自定义前缀","类型":"string","默认值":"`zent`"}}}]},{"name":"Cascader 级联选择","content":"适用于各类级联操作（例如城市级联）","children":[{"name":"API","content":"","children":[{"name":"Cascader","content":{"value":{"说明":"级联的选中值","类型":"array","默认值":"[]","备选值":"''"},"options":{"说明":"可选项数据源","类型":"array","默认值":"[]","备选值":"''"},"title":{"说明":"tab子项的标题","类型":"array","默认值":"['省份', '城市', '县区']","备选值":"''"},"onChange":{"说明":"数据变化时的回调","类型":"func","默认值":"noop","备选值":"''"},"loadMore":{"说明":"动态加载级联的数据，返回值需为 Promise","类型":"func","默认值":"-","备选值":"''"},"changeOnSelect":{"说明":"是否选择即触发改变","类型":"boolean","默认值":"false","备选值":"''"},"placeholder":{"说明":"输入框占位文本","类型":"string","默认值":"'请选择'","备选值":"''"},"prefix":{"说明":"自定义前缀","类型":"string","默认值":"'zent'","备选值":"''"},"className":{"说明":"自定义额外类名","类型":"string","默认值":"''","备选值":"''"},"popClassName":{"说明":"popover自定义类名","类型":"string","默认值":"''zent-cascader__popup''","备选值":"''"}},"info":"-   级联数据可以通过初始时传入全量 `options\t` ，也可以通过 `loadMore` 动态加载\n-   通过 `loadMore` 加载数据时，参数 `root` 表示当前点击元素的数据对象，`stage` 表示当前是第几层级\n-   参数 `isLeaf` 是配合 `loadMore` 使用的，表示点击该节点时是否不再继续发请求"}]}]},{"name":"Checkbox 多选","content":"","children":[{"name":"使用指南","content":"- Checkbox 表现为一个[受控组件][https://facebook.github.io/react/docs/forms.html#controlled-components], 需要设置 `onChange` 回调在组件外部处理其 `value` 属性的变化.\n\n- `value` 支持任意类型的值, 包括引用类型."},{"name":"API","content":"","children":[{"name":"Checkbox API","content":{"checked":{"说明":"指定当前是否选中","类型":"bool","默认值":"`false`"},"value":{"说明":"组件对应的值，在`CheckboxGroup`中使用","类型":"any","默认值":""},"disabled":{"说明":"使组件不可用","类型":"bool","默认值":""},"indeterminate":{"说明":"展示部分选中的模式","类型":"bool","默认值":"`false`"},"onChange":{"说明":"变化时回调函数","类型":"func(e:Event)","默认值":""},"className":{"说明":"自定义额外类名","类型":"string","默认值":""},"prefix":{"说明":"自定义前缀","类型":"string","默认值":"`'zent'`"}}},{"name":"Checkbox Group API","content":{"value":{"说明":"必填，指定选中的选项","类型":"array<any>","默认值":"`[]`"},"isValueEqual":{"说明":"可选，判断value值是否相等","类型":"func(a, b)","默认值":"`() => a === b`"},"disabled":{"说明":"使组件不可用","类型":"bool","默认值":""},"onChange":{"说明":"变化时回调函数","类型":"func(checkedValueList)","默认值":""},"className":{"说明":"自定义额外类名","类型":"string","默认值":""},"prefix":{"说明":"自定义前缀","类型":"string","默认值":"`'zent'`"}},"info":"[controlled-components]: https://facebook.github.io/react/docs/forms.html#controlled-components"}]}]},{"name":"ColorPicker 颜色选择器","content":"用于颜色选择，支持多种格式。","children":[{"name":"API","content":"","children":[{"name":"ColorPicker","content":{"color":{"说明":"颜色选择器的颜色","类型":"string","默认值":"","可选值":"`'#5197FF'` 或  `'rgba(81, 151, 255, 0.6)'`"},"showAlpha":{"说明":"是否显示透明度选择","类型":"bool","默认值":"`false`","可选值":"`true/false`"},"type":{"说明":"颜色选择器类型","类型":"string","默认值":"`'default'`","可选值":"`'default'`、`'simple'`"},"presetColors":{"说明":"简化版自定义颜色数组","类型":"array","默认值":"[`'#FFFFFF'`, `'#F8F8F8'`, `'#F2F2F2'`, `'#999999'`, `'#444444'`, `'#FF4444'`, `'#FF6500'`, `'#FF884D'`, `'#FFCD00'`, `'#3FBD00'`, `'#3FBC87'`, `'#00CD98'`, `'#5197FF'`, `'#BADCFF'`, `'#FFEFB8'`]","可选值":""},"onChange":{"说明":"颜色变化时回调函数","类型":"func(color)","默认值":"`noop`","可选值":""},"className":{"说明":"可选，自定义类名","类型":"string","默认值":"`''`","可选值":""},"wrapperClassName":{"说明":"可选，自定义trigger包裹节点的类名","类型":"string","默认值":"`''`","可选值":""},"prefix":{"说明":"可选，自定义前缀","类型":"string","默认值":"`'zent'`","可选值":""}}},{"name":"ColorBoard","content":{"color":{"说明":"颜色选择器的颜色","类型":"string","默认值":"","可选值":"`'#5197FF'` 或  `'rgba(81, 151, 255, 0.6)'`"},"showAlpha":{"说明":"是否显示透明度选择","类型":"bool","默认值":"`false`","可选值":"`true/false`"},"onChange":{"说明":"颜色变化时回调函数","类型":"func(color)","默认值":"`noop`","可选值":""},"className":{"说明":"可选，自定义类名","类型":"string","默认值":"`''`","可选值":""},"prefix":{"说明":"可选，自定义前缀","类型":"string","默认值":"`'zent'`","可选值":""}}}]}]},{"name":"CopyButton 复制按钮","content":"复制按钮，点击后复制指定的文本到系统剪贴板中。","children":[{"name":"使用指南","content":"- 当需要复制某些文本的时候，可以使用此组件\n- 不依赖 Flash，所以在某些老版本浏览器上可能失败"},{"name":"API","content":{"text":{"说明":"需要复制的文本","类型":"text","默认值":""},"onCopySuccess":{"说明":"复制成功后的回调函数，如果是字符串则使用 `Notify.info` 提示","类型":"function \\","默认值":"string","undefined":"`复制成功`"},"onCopyError":{"说明":"复制失败后的回调函数，如果是字符串则使用 `Notify.error` 提示","类型":"function \\","默认值":"string","undefined":"`复制失败`"}}}]},{"name":"DateRangeQuickPicker","content":"简单的时间范围选择组件, 提供前7天和前30天的快速选项.","children":[{"name":"使用场景","content":"列表页 filter 区域快速选择日期使用"},{"name":"API","content":{"prefix":{"说明":"自定义前缀","类型":"string","默认值":"`'zent'`","备选值":""},"className":{"说明":"自定义类名","类型":"string","默认值":"`''`","备选值":""},"preset":{"说明":"自定义快捷选项","类型":"array","默认值":"`[{text: '最近7天', value: 7}, {text: '最近30天', value: 30}]`","备选值":""},"onChange":{"说明":"时间变更回调函数","类型":"func","默认值":"","备选值":""},"value":{"说明":"起始、结束时间","类型":"array","默认值":"`[]`","备选值":""},"valueType":{"说明":"设置 onChange 的返回值","类型":"string","默认值":"`''`","备选值":"`'string'`, `'number'`"},"format":{"说明":"返回日期字符串格式","类型":"string","默认值":"`'YYYY-MM-DD'` 或 `'YYYY-MM-DD HH:mm:ss'`","备选值":""},"chooseDays":{"说明":"选择天数","类型":"number","默认值":"","备选值":""},"min":{"说明":"可选日期的最小值","类型":"string/instanceOf(Date)","默认值":"`''`","备选值":""},"max":{"说明":"可选日期的最大值","类型":"string/instanceOf(Date)","默认值":"`''`","备选值":""}}}]},{"name":"DatePicker 时间选择","content":"时间选择组件, 提供基础的时间、日期筛选功能.","children":[{"name":"使用指南","content":"- 包含四个组件：`DatePicker`、`MonthPicker`、`WeekPicker` 和 `RangePicker`。\n- `DatePicker` 和 `RangePicker` 可以通过 `showTime` 属性来支持时间的选择。\n- 通过 `format` 属性自定义日期字符串的格式，`format` 的详细说明见页面最后的表格。"},{"name":"API","content":"","children":[{"name":"共同的 API","content":{"onChange":{"说明":"选择日期回调函数，受控组件，value 和 onChange 必须同时提供","类型":"func","默认值":"`noop`","是否必须":"是"},"value":{"说明":"默认选择日期","类型":"string \\","默认值":"Date","是否必须":"","undefined":"是"},"defaultValue":{"说明":"默认面板显示日期","类型":"string \\","默认值":"Date","是否必须":"","undefined":"否"},"onClick":{"说明":"用户点击选择日期的回调","类型":"func","默认值":"","是否必须":"否"},"openPanel":{"说明":"面板是否打开","类型":"boolean","默认值":"false","是否必须":"否"},"onOpen":{"说明":"面板弹出的回调","类型":"func","默认值":"","是否必须":"否"},"onClose":{"说明":"面板关闭的回调","类型":"func","默认值":"","是否必须":"否"},"disabled":{"说明":"是否处于 disabled 状态","类型":"bool","默认值":"`false`","是否必须":"否"},"format":{"说明":"返回日期字符串格式","类型":"string","默认值":"不同的picker默认值不同，下详","是否必须":"否"},"placeholder":{"说明":"提示文案","类型":"string","默认值":"不同的picker默认值不同，下详","是否必须":"否"},"className":{"说明":"额外的 css 类","类型":"string","默认值":"","是否必须":"否"},"width":{"说明":"宽度","类型":"string \\","默认值":"number","是否必须":"","undefined":"否"},"prefix":{"说明":"自定义前缀","类型":"string","默认值":"`'zent'`","是否必须":"否"},"confirmText":{"说明":"确定按钮文字","类型":"string","默认值":"'确定'","是否必须":"否"},"popPosition":{"说明":"pop 弹出层 align 方向","类型":"oneOf(['left', 'right'])","默认值":"'left'","是否必须":"否"}}},{"name":"DatePicker","content":{"showTime":{"说明":"是否显示时间筛选","类型":"bool","默认值":"`false`","是否必须":"否"},"disabledTime":{"说明":"时间禁用函数","类型":"func","默认值":"`noop`","是否必须":"否"},"disabledDate":{"说明":"判断日期是否可选函数","类型":"func","默认值":"`noop`","是否必须":"否"},"format":{"说明":"返回日期字符串格式","类型":"string","默认值":"`YYYY-MM-DD`","是否必须":"否"},"min":{"说明":"可选日期的最小值","类型":"string/Date","默认值":"","是否必须":"否"},"max":{"说明":"可选日期的最大值","类型":"string/Date","默认值":"","是否必须":"否"},"valueType":{"说明":"设置 onChange 的返回值，可选值为 `string`/`number`/`date`","类型":"string","默认值":"''","是否必须":"否"},"name":{"说明":"input 的 name 属性","类型":"string","默认值":"","是否必须":"否"},"placeholder":{"说明":"提示文案","类型":"string","默认值":"`请选择日期`","是否必须":"否"},"defaultTime":{"说明":"自定义时间的默认值","类型":"string","默认值":"`'00:00:00'`","是否必须":"否"},"onBeforeConfirm":{"说明":"用户点击确认前的回调函数，返回 true 表示可以确认，false 表示不能确认","类型":"func","默认值":"","是否必须":"否"},"onBeforeClear":{"说明":"用户点击清除icon前的回调函数，返回 true 表示可以清除，false 表示不能清除","类型":"func","默认值":"","是否必须":"否"}},"info":"**注意：**\n- `disabledDate` 函数调用时会传入一个 date 对象作为参数，用户可以自定义这个 date 是否处于禁用区间，返回 true/false，需要特殊的禁用规则时可以通过这个函数来实现，一般情况下使用 `max` 和 `min` 就可以满足需求。\n- `max/min` 和 `disabledDate` 会存在冲突，同时存在的时候以 `disabledDate` 的返回值为准，大于**等于** min 小于 max 可选。\n- `disabledTime` 函数应该返回一个对象，对象中包含 `disabledHour`,`disabledMinute`,`disabledSecond` 三个函数。\n- `format` 只需要传日期部分，时间部分当 `showTime` 为 `true` 时会自动拼接， 同 `RangePicker`。\n\n更详细用法请看示例。"},{"name":"WeekPicker","content":{"startDay":{"说明":"一周的开始日期","类型":"number","默认值":"1","是否必须":"否"},"disabledDate":{"说明":"判断日期是否可选函数","类型":"func","默认值":"`noop`","是否必须":"否"},"format":{"说明":"返回日期字符串格式","类型":"string","默认值":"`YYYY-MM-DD`","是否必须":"否"},"min":{"说明":"可选日期的最小值","类型":"string/Date","默认值":"","是否必须":"否"},"max":{"说明":"可选日期的最大值","类型":"string/Date","默认值":"","是否必须":"否"},"valueType":{"说明":"设置 onChange 的返回值，可选值为 `string`/`number`/`date`","类型":"string","默认值":"''","是否必须":"否"},"name":{"说明":"input 的 name 属性","类型":"string","默认值":"","是否必须":"否"},"placeholder":{"说明":"提示文案","类型":"string","默认值":"`请选择日期`","是否必须":"否"},"defaultTime":{"说明":"自定义时间的默认值","类型":"string","默认值":"`'00:00:00'`","是否必须":"否"}}},{"name":"MonthPicker","content":{"value":{"说明":"选中的月份","类型":"string/Date","默认值":"`new Date()`","是否必须":"否"},"format":{"说明":"返回月份字符串格式","类型":"string","默认值":"`'YYYY-MM'`","是否必须":"否"},"disabled":{"说明":"是否处于disabled 状态","类型":"bool","默认值":"`false`","是否必须":"否"},"name":{"说明":"input 的 name 属性","类型":"string","默认值":"","是否必须":"否"},"placeholder":{"说明":"提示文案","类型":"string","默认值":"`请选择月份`","是否必须":"否"}}},{"name":"RangePicker","content":{"type":{"说明":"类型，`combine`/`split`","类型":"string","默认值":"`combine`","是否必须":"否"},"showTime":{"说明":"是否显示时间筛选","类型":"bool","默认值":"`false`","是否必须":"否"},"value":{"说明":"默认选择日期","类型":"array","默认值":"`[]`","是否必须":"否"},"format":{"说明":"返回日期字符串格式","类型":"string","默认值":"`'YYYY-MM-DD'`","是否必须":"否"},"disabledDate":{"说明":"判断日期是否可选函数","类型":"func","默认值":"`noop`","是否必须":"否"},"disabledTime":{"说明":"时间禁用函数","类型":"func","默认值":"`noop`","是否必须":"否"},"min":{"说明":"可选日期的最小值","类型":"string/instanceOf(Date)","默认值":"``","是否必须":"否"},"max":{"说明":"可选日期的最大值","类型":"string/instanceOf(Date)","默认值":"``","是否必须":"否"},"valueType":{"说明":"设置 onChange 的返回值，可选值为 `string`/`number`/`date`","类型":"string","默认值":"''","是否必须":"否"},"placeholder":{"说明":"提示文案","类型":"array","默认值":"`['开始日期','结束日期']`","是否必须":"否"},"defaultTime":{"说明":"自定义时间的默认值","类型":"string","默认值":"`'00:00:00'`","是否必须":"否"}},"info":"**注意：**\n- `type` 为了和老代码兼容，默认是 `combine`，但是交互方面现在是推荐使用 `split`。\n- `showTime` 的时候，传入的 `min` 或 `max` 如果为字符串，必须有 time 部分，即 `2017-01-01 11:11:11` 种格式。\n- `disabledTime` 和 `DatePicker` 的类似，区别在于被调用时会传入一个 `type` 参数，值为 `start/end`，参照上面的 `disabledTime` 函数。\n- `onClick` 调用时会传入被点击的日期值和点击的类型（start/end) 作为参数，即 `onClick(val, type)`。"},{"name":"格式化字符表","content":{"**Year**":{"字符":"YY","输出":"70 71 ... 29 30"},"":{"字符":"dddd","输出":"星期日, 星期一 ... 星期五, 星期六"},"**Month**":{"字符":"M","输出":"1 2 ... 11 1"},"**Date**":{"字符":"D","输出":"1 2 ... 30 31"}},"info":"  "}]}]},{"name":"Design 微页面编辑组件","content":"微页面编辑组件，用所见即所得(WYSIWG)的方式创建内容丰富的富文本页面。\n\n⚠️ 注意：Zent 里面导出的 `Design` 组件使用了 `react-dnd-html5-backend` 这个包的 `HTML5Backend`，由于 `react-dnd` 的限制，`HTML5Backend` 在一个 React 组件树里只能出现一次。如果你在外层已经有地方使用了这个 `HTML5Backend`，请使用 `zent/lib/design/Design` 这个组件。这个组件功能完全一样，区别是不依赖 `HTML5Backend`。","children":[{"name":"API","content":{"components":{"说明":"所有组件的定义数组","类型":"array","默认值":"[]","是否必须":"必须"},"value":{"说明":"组件当前的值","类型":"array","默认值":"[]","是否必须":"可选"},"onChange":{"说明":"组件值修改时触发的回调函数","类型":"func(value: array): void","默认值":"必须"},"defaultSelectedIndex":{"说明":"默认选中的下标（value）","类型":"number","默认值":"-1","是否必须":"可选"},"preview":{"说明":"用于自定义整个 Design 的渲染","类型":"Component","默认值":"DesingPreview","是否必须":"可选"},"confirmUnsavedLeave":{"说明":"有未保存数据关闭窗口时需要用户确认","类型":"boolean","默认值":"true","是否必须":"可选"},"cache":{"说明":"是否将未保存的数据暂存到 localStorage 中","类型":"boolean","默认值":"false","是否必须":"可选"},"cacheId":{"说明":"配合 cache 使用，用于设置 Design 示例的缓存 id","类型":"string","默认值":"","是否必须":"cache 为 true 时必填"},"cacheRestoreMessage":{"说明":"恢复缓存时的提示文案","类型":"node","默认值":"提示：在浏览器中发现未提交的内容，是否使用该内容替换当前内容？","是否必须":"可选"},"disabled":{"说明":"是否禁用编辑","类型":"boolean","默认值":"false","是否必须":"可选"},"globalConfig":{"说明":"全局参数，通常是 window._global","类型":"object","默认值":"","是否必须":"可选"},"children":{"说明":"渲染在 Design 内部的额外内容","类型":"node","默认值":"","是否必须":"可选"},"scrollTopOffset":{"说明":"滚动到顶部时的偏移量","类型":"number \\","默认值":"func","是否必须":"","undefined":"可选"},"scrollLeftOffset":{"说明":"滚动到左侧时的偏移量","类型":"number \\","默认值":"func","是否必须":"","undefined":"可选"},"className":{"说明":"额外类名","类型":"string","默认值":"","是否必须":"可选"},"prefix":{"说明":"类名前缀","类型":"string","默认值":"","是否必须":"可选"},"type: string":{"说明":"string[],"},"defaultType?: number":{"说明":"(string[]","类型":"string) => string"},"limit?: number":{"说明":"(count: number) => boolean,"},"editorProps: (value: object) => object":{"说明":"object,"},"previewProps: (value: object) => object":{"说明":"object"}},"info":"`components` 是一个数组，列出了所有支持的组件，每一项需要指定组件的类型，预览和编辑组件，以及是否可以拖拽、编辑等。 \n\n```js\ntype Component = {\n  // 组件类型，必须唯一\n\n  // 组件类型的默认值\n  // 如果 type 是数组，可以传一个下标\n  // 如果是函数，不管 type 是字符串还是数组都会调用\n\n  // 渲染预览部分的组件\n  preview: ReactComponent,\n\n  // 渲染编辑部分的组件\n  editor: ReactComponent,\n\n  // 预览组件的包裹层  \n  previewItem?: ReactComponent,\n\n  // 所有预览界面上的事件都是在这个里面处理的\n  previewController?: ReactComponent,\n\n  // 编辑组件的包裹层\n  editorItem?: ReactComponent,\n\n  // 组件是否可以拖拽\n  dragable?: boolean,\n\n  // 组件是否出现在添加组件的列表里面\n  appendable?: boolean,\n\n  // 是否显示右下角的编辑区域(编辑/加内容/删除)\n  // 不支持在这里配置编辑区域的按钮，参数太多。\n  // 如果要自定义编辑区域，可以通过重写 previewController 的方式来做。\n  configurable?: boolean,\n\n  // 组件是否可以编辑\n  // 可以选中的组件一定是可以编辑的\n  // 不可编辑的组件不可选中，只能展示。\n  // 右下角的编辑区域由 configurable 单独控制\n  editable?: boolean,\n\n  // 选中时是否高亮\n  highlightWhenSelect?: boolean,\n\n  // 组件最多可以添加的实例个数，可以是数字或者一个函数\n  // 不传或者传 0 表示没有限制\n  // 如果是函数，返回 false 表示不可再添加\n  \n  // 是否可以添加组件的回调函数，返回一个 Promise，resolve 的话可以创建\n  // 添加组件的实例时会调用\n  shouldCreate?: (comp: Component) => Promise,\n\n  // 传给 editor 的额外 props\n\n  // 传给 preview 的额外 props\n}\n```\n\n`value` 是一个数组，数组里面每一项都有一个 `type` 属性，用来标识这个值应该由哪个组件来渲染。"},{"name":"Design.group 方法","content":"原型：`group(name: string): object`\n\n`Design` 组件支持将可添加的组件分组，只需要在 `components` 数组内适当的位置插入 `Design.group('groupName')` 组件即可。\n\n```\n[\n  config,\n\n  Design.group('分组1'),\n  componentA,\n  componentB,\n\n  Design.group('分组2'),\n  componentC,\n  componentD\n]\n```"},{"name":"Design 实例方法","content":"* `design.validate(): Promise`, 触发校验，如果有错误会 reject，否则 resolve\n* `design.markAsSaved()`，标记为以保存状态，如果使用了缓存或者离开提示需要手动调用这个函数通知 Design 更改已经保存"},{"name":"stripUUID","content":"`Design` 上面有一个 `stripUUID` 方法，数据发送到服务器之前可以使用这个函数来剔除 `Design` 内部使用的 id，这样可以减小数据大小。\n\n使用这个函数是可选的，不剔除也不会有问题，只是传输和存储的数据会稍稍大一点。"},{"name":"如何实现新的 Design 组件","content":"每个 Design 组件都分为两部分：Preview 以及 Editor。\n\nPreview 比较简单，实现一个组件接受 `{ value: any, globalConfig: any, design: object }` 这些 props即可。\n\nEditor 请继承 `@youzan/design/lib/base/editor/DesignEditor`，这个基类提供了一些常用的方法（例如 `onChange` 事件的处理函数），在子类里面可以直接使用。\n\nEditor 接受如下props：`{ value: any, onChange: func, showError: boolean, validation: object, design object }`。\n\n- `validate(value): Promise` 有错误的时候 resolve 一个错误对象出来。\n- `props.design` 提供了一下可能有用的方法：例如触发组件的校验等。\n\nEditor 必须提供这几个静态属性：`designType, designDescription, getInitialValue, validate`。","children":[{"name":"一个例子","content":"```js\n// Preview\nimport React, { PureComponent, Component } from 'react';\n\nexport default class NoticePreview extends (PureComponent || Component) {\n  render() {\n    const { value } = this.props;\n\n    return (\n      <div className=\"rc-design-component-notice-preview\">{value}</div>\n    );\n  }\n}\n\n// Editor\nimport React from 'react';\nimport { Input } from 'zent';\n\nimport { DesignEditor, ControlGroup } from '@youzan/design/base/editor/DesignEditor';\n\nexport const PLACEHOLDER = '请填写内容，如果过长，将会在手机上滚动显示';\n\nexport default class NoticeEditor extends DesignEditor {\n  render() {\n    const { value, showError, validation } = this.props;\n\n    return (\n      <div className=\"rc-design-component-notice-editor\">\n        <ControlGroup\n          label=\"公告:\"\n          required\n          showError={showError || this.getMetaProperty('content', 'touched')}\n          error={validation.content}\n        >\n          <Input\n            name=\"content\"\n            placeholder={PLACEHOLDER}\n            value={value.content}\n            onChange={this.onInputChange}\n            onBlur={this.onInputBlur}\n          />\n        </ControlGroup>\n      </div>\n    );\n  }\n\n  static designType = 'notice';\n  static designDescription = '公告';\n  static getInitialValue() {\n    return {\n      content: '',\n      scrollable: false\n    };\n  }\n\n  static validate(value) {\n    return new Promise(resolve => {\n      const errors = {};\n      const { content } = value;\n      if (!content || !content.trim()) {\n        errors.content = '请填写公告内容';\n      }\n\n      resolve(errors);\n    });\n  }\n}\n```"}]}]},{"name":"Dialog 对话框","content":"对话框，通过打开一个浮层的方式，避免打扰用户的操作流程。","children":[{"name":"使用指南","content":"-  命令式, 直接调用 `openDialog` 函数。\n\n-  组件式, 通过控制 `visible` 来显示／隐藏对话框。\n\n-  推荐使用命令式, 不需要在外部维护一个 `visible` 属性, 更加方便。"},{"name":"API","content":{"title":{"说明":"自定义弹框标题","类型":"node","默认值":"`''`"},"children":{"说明":"弹框内容: `<Dialog>xxxx</Dialog>`","类型":"node","默认值":"`null`"},"footer":{"说明":"底部内容","类型":"node","默认值":"`null`"},"visible":{"说明":"是否打开对话框","类型":"bool","默认值":"`false`"},"closeBtn":{"说明":"是否显示右上角关闭按钮","类型":"bool","默认值":"`true`"},"onClose":{"说明":"关闭操作回调函数","类型":"func","默认值":"`noop`"},"mask":{"说明":"是否显示遮罩","类型":"bool","默认值":"`true`"},"maskClosable":{"说明":"点击遮罩是否可以关闭","类型":"bool","默认值":"`true`"},"className":{"说明":"自定义额外类名","类型":"string","默认值":"`''`"},"prefix":{"说明":"自定义前缀","类型":"string","默认值":"`'zent'`"},"style":{"说明":"自定义样式","类型":"object","默认值":"`{}`"}},"children":[{"name":"openDialog","content":{"dialogId":{"说明":"可选，对话框的 ID，可以通过 `closeDialog(dialogId)` 来关闭对话框","类型":"string","默认值":"随机生成的唯一ID"},"parentComponent":{"说明":"可选，父组件的引用, 用于关联 context","类型":"object","默认值":"`null`"}},"info":"`openDialog(options: object): function`\n\n**`options` 参数支持组件除 `visible` 以外的所有属性，外加以下参数：**\n\n\n如果需要组件实例的引用, 可以传一个函数形式的 `ref` 给 `openDialog`, **不支持字符串形式的 `ref`.**\n\n> `openDialog` 的返回值是一个手动关闭 Dialog 的函数, `close(false)` 将不会触发Dialog的 `onClose` 方法。**推荐使用 `closeDialog` 来关闭对话框。**"},{"name":"closeDialog","content":"`closeDialog(dialogId: string, options: object): void`\n\n`dialogId` 对应调用 `openDialog` 时传的参数。\n\n`options.triggerOnClose` 如果是 `true`，关闭时会触发 `onClose` 回调，`false` 时不会触发。"},{"name":"指定Dialog宽度","content":"在 `style` 中可以指定弹出窗口的宽度, e.g. `style={{ width: '600px' }}`.\n\n默认情况下弹出窗口会自适应内容的宽度, 同时有最小宽度和最大宽度."}]}]},{"name":"Dropdown 下拉菜单","content":"向下弹出的弹层组件。\n\n我们不提供单独的名为 `Dropdown` 的组件，`Dropdown` 组件的功能是 `Popover` 组件的一个子集，这个文档描述了如何使用 `Popover` 来实现 `Dropdown` 的功能。","children":[{"name":"使用场景","content":"一般用于下拉菜单。"},{"name":"API","content":{},"info":"请参考 [`Popover` 的 API 文档](popover#api)。"},{"name":"关于下拉菜单弹出位置","content":"建议使用 `Popover` 提供的 `AutoXxxYxx` 定位方式，例如 `AutoBottomLeft` 默认定位在左下角，但是如果超出屏幕的话会自动调整位置。\n\n可选的定位方式请阅读 [`Popover` 的定位文档](popover#position%20api)。"}]},{"name":"Form 表单组件","content":"1. [使用指南](#shi-yong-zhi-nan)\n2. [表单校验](#biao-dan-xiao-yan)\n3. [格式化 value](#ge-shi-hua-value)\n4. [表单操作](#biao-dan-cao-zuo)\n5. [其他](#qi-ta)\n6. [组件原理](#zu-jian-yuan-li)\n7. [其他说明](#qi-ta-shuo-ming)\n8. [API](#api)","children":[{"name":"使用指南","content":"","children":[{"name":"表单 `Form`","content":"- `Form` 组件提供三种样式：`inline`，`horizontal`， `vertical`。\n- 使用 `Form` 组件，必须先调用 `createForm` 方法包装，为表单注入 `zentForm` 属性，从而提供表单和表单元素的各种操作方法，详见 demo 和 [`zentForm` API](#zentform) 。"},{"name":"表单域 `Field`","content":"`Field` 组件本质上是一个辅助性的组件，不提供任何样式，只负责管理表单元素 value 值的生命周期和表单元素的 error 等信息。\n\n- `Field` 必须要有 `name` 属性；\n- `Field` 的展现形式由 `component` 属性传入的组件决定，`Form` 组件中内置了常用的表单元素组件 `FormInputField`，`FormSelectField`，`FormRadioGroupField`，`FormCheckboxField`，`FormCheckboxGroupField`，`FormNumberInputField`，`FormSwitchField`，`FormColorPickerField`，`FormDateRangePickerField`，也可以使用单独封装的自定义表单元素组件；\n- `Form` 组件提供了 `getControlGroup` 方法，可以快速封装自定义表单元素组件，使用方法参考 demo 和 [`getControlGroup` API](#form-getcontrolgroup) 。"},{"name":"使用 `getControlGroup` 封装自定义表单域","content":""},{"name":"多个表单元素的封装","content":"当一个 `Field` 里需要封装多个表单元素时，一般会将多个表单元素的 value 值封装在一个对象里传入到 `Field` 中。当无法使用 `getControlGroup` 满足封装要求时，可以自己封装组件，通过调用 `Field` 组件传入的 `onChange` 事件更改 `Field` 的 value。\n\n⚠️注意：调用 `Field` 传入的 `onChange` 事件默认会覆盖原值，可以通过传入 `{ merge: true}` 参数可以部分覆盖 value 值。"}]},{"name":"表单校验","content":"","children":[{"name":"表单校验的使用","content":"- `Field` 组件支持传入 `validations` 和 `validationErrors` 来指定校验规则和校验提示；\n- `validations` 对象支持预置的内部校验规则（详见[内置 validation rules](#nei-zhi-validation-rules) ）, 也支持传入自定义的校验函数，校验函数返回 `true` 时表示验证通过；\n- 可以通过 `Form.createForm` 扩展内部校验规则，详见 [`Form.createForm` API](#form-createform) 。"},{"name":"表单校验时机","content":"表单的默认校验时机是 value 值改变的时候。可以修改 `validateOnChange`，`validateOnBlur` 来改变校验时机，如在 blur 时再校验（一般用于Input输入框）。"},{"name":"异步校验","content":"异步校验在 blur 时触发，如果需要在自定义组件中手动触发异步校验，需要自己调用`props.onBlur(event)`。 `value` 值可以直接传给 `event` ，或者作为 `event` 的属性传入。\n\n如果在没有触发异步校验的情况下（比如没有对表单项进行过操作）直接提交表单时，默认不会触发异步校验，使用内置的`handleSubmit`方法可以在提交表单时触发从未进行的异步校验。"}]},{"name":"格式化 `value`","content":"`Form` 组件提供了 `format` 和 `nomalize` 方法 来对 `value` 进行格式化，它们的执行时机详见 [value 的生命周期](#field-zhong-value-de-sheng-ming-zhou-qi)。"},{"name":"表单操作","content":"- `Form.createForm` 为组件注入 `zentForm` 属性，提供了表单和表单元素的各种操作方法，如获取表单元素值，重置获取表单元素值等，详见 [`zenForm` API](#zentform)\n- `Form` 组件内部对表单提交的过程也进行了封装，可以把异步提交过程封装在一个函数里并**返回 `Promise` 对象**，组件内部会根据 `Promise` 对象的执行结果分别调用 `onSubmitSuccess` 和 `onSubmitFail` 方法，同时更新内部维护的 `isSubmitting` 属性（可以通过 `zentForm.isSubmitting()` 得到）。"},{"name":"其他","content":"","children":[{"name":"`Form` 布局","content":""},{"name":"`Fieldset` 组件","content":""},{"name":"`FormSection` 组件","content":""},{"name":"`FieldArray` 组件","content":""}]},{"name":"组件原理","content":"本组件核心由以下几部分组成：\n\n- `createForm` 函数：用来构建一个高阶组件，其中维护了表单中的所有表单元素（`Field` 组件）实例。通过向子组件的 `props` 中注入 `zentForm` 属性来提供表单和表单元素的各种操作方法。\n- `Form` 组件：作为整个表单的最顶层骨架，是对 `<form>` 标签的简单封装，定义了默认的 class 来提供基础样式。\n- `Field` 组件：用来封装各种表单元素组件（如 `Input` 、 `Checkbox` 、`Select` 以及各种自定义组件）的一个高阶组件。其中维护了表单元素 value 值和校验错误等信息。Field 组件会向表单元素组件传入封装过的 `onChange` 、`onBlur` 回调和 `value` 、`error` 等表单元素需要的 props 。\n\n具体的使用，详见 [API 说明](#api)。"},{"name":"其他说明","content":"","children":[{"name":"封装自定义的表单元素组件","content":"- `Field` 的展示完全由传入到 `component` 属性中的组件所控制。这个组件能够接收到所有从 `Field` 传入的 props （包括 `Field` 中构造的一些隐含的 props ，具体[`Form.Field` API](#form-field) ）。\n\n- 对于一些常用的 `zent` 表单组件， `Form` 组件已经使用了 `getControlGroup` 函数进行了封装。如果产品设计上有一些特殊的需求，或者需要封装自定义的组件，也可以直接使用或者参考 `getControlGroup`的方式来对组件进行封装， 参考 [demo 封装多个表单元素](#duo-ge-biao-dan-yuan-su-de-feng-zhuang)。\n\n- **如果需要在一个 `Field` 中展示多个表单元素，可以将所有的表单元素封装在一个对象中传入 Field 的value 中。具体可以参考 [demo 封装多个表单元素](#duo-ge-biao-dan-yuan-su-de-feng-zhuang)。**"},{"name":"`Field` 中 `value` 的生命周期","content":"- 表单元素的初始值需要通过在 `Field` 中指定 `value` 值传入。 `value` 值的生命周期如下图所示：\n\n```\nField 中传入 value ---> 使用 format() 格式化 value ---> format 过的 value 传入 component 中渲染组件\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t ↑                                 |\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t |                                 ↓\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t |                          用户操作改变 value\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t |                                 |\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t |                                 ↓\n\t\tnormalize 过的 value 写入 form 中维护, 用于数据提交 <--- 使用 normalize() 格式化 value\n```\n\n- 如果传入 `Field` 的 `value` 值是一个动态值，在外部改变 value 后会重新开始 value 的生命周期。"}]},{"name":"API","content":"","children":[{"name":"**`Form`**","content":{"className":{"说明":"自定义额外类名","类型":"string","默认值":"`''`","是否必填":"否"},"prefix":{"说明":"自定义前缀","类型":"string","默认值":"`'zent'`","是否必填":"否"},"vertical":{"说明":"垂直排列布局","类型":"boolean","默认值":"`true`","是否必填":"否"},"horizontal":{"说明":"水平排列布局","类型":"boolean","默认值":"`false`","是否必填":"否"},"inline":{"说明":"行内排列布局","类型":"boolean","默认值":"`false`","是否必填":"否"},"onSubmit":{"说明":"表单提交回调","类型":"func(e:Event)","默认值":"`noop`","是否必填":"否"},"style":{"说明":"内联样式","类型":"object","默认值":"null","是否必填":"否"}},"info":"对 html 中 form 元素的一个简单封装, 提供默认的 className."},{"name":"**`Form.createForm`**","content":{"formValidations":{"说明":"用于添加自定义校验方法, 通过这种方式添加的方法在 validations 中使用时可以传额外的参数","类型":"object","是否必填":"否"},"参数":{"说明":"说明","类型":"类型"},"------":{"说明":"------","类型":"------"},"onChange":{"说明":"任意表单元素修改后触发的回调，参数为所有表单元素值的对象","类型":"func(values: Object)","是否必填":"否"},"onSubmitSuccess":{"说明":"提交成功后的回调，参数是 submit 函数中 promise 的返回值","类型":"func(submitResult: any)","是否必填":"否"},"onSubmitFail":{"说明":"提交失败后的回调，参数要么是 SubmissionError 的一个实例，要么是 undefined","类型":"func(submitError: SubmissionError)","是否必填":"否"},"getFormValues":{"说明":"获取与 form 绑定的所有表单元素值","类型":"func"},"getFieldError":{"说明":"获取某个 Field 的错误信息, 没有报错信息返回空","类型":"func(name: String)"},"setFormDirty":{"说明":"设置所有 Field 的状态为非原始状态, 用于在提交表单时让 Field 把没有显示出来的错误显示出来","类型":"func(isDirty: Boolean)"},"setFieldExternalErrors":{"说明":"设置外部传入的错误信息（比如服务端校验错误）， errors 的 key 为 Field 的 name ， value 为错误文案","类型":"func(errors: Object)"},"setFieldsValue":{"说明":"设置表单 Field 的值为指定值","类型":"func(data: Object)","是否必填":""},"resetFieldsValue":{"说明":"把所有 Field 的值恢复到指定值或初始状态","类型":"func(data: Object)"},"initialize":{"说明":"设置表单 Field 初始值","类型":"func(data: Object)","是否必填":""},"isValid":{"说明":"表单的所有 Field 是否都通过了校验","类型":"func"},"isSubmitting":{"说明":"表单是否正在提交","类型":"func"},"isValidating":{"说明":"表单是否有 Field 在异步校验","类型":"func"},"isFieldDirty":{"说明":"Field 是否变更过值","类型":"func(name: String)"},"isFieldValidating":{"说明":"Field 是否在异步校验","类型":"func(name: String)"}},"info":"##### **使用方式：`Form.createForm(options)(FormComponent)`**\n\n##### **`options`**\n\n`options` 支持的配置项如下:\n\n\n⚠️注意：项目中的通用校验方法，可以通过在一个文件中定义公共的`formValidations`对象后引入。\n\n##### **`createForm` 返回组件中可接收的 props**\n\n`createForm` 方法构建了一个高阶组件，该组件可以定义了一些额外的 props 。\n\n\n⚠️注意：想要获取被 createForm 包裹的 FormComponent 的实例，可以在 createForm 创建的组件上添加 ref 然后调用`getWrappedForm`方法获取到。\n\n##### **`zentForm`**\n\n经过 `Form.createForm` 包装的组件通过 props 被添加了 `zenForm` 属性, 可以通过 `this.props.zentForm` 访问, `zentForm` 提供的 API 如下：\n\n\n##### **`handleSubmit`**\n\n`createForm` 还会为被包装的组件提供一个封装过的 `handleSubmit` 方法，具体使用可以参考[demo 表单操作](#biao-dan-cao-zuo)。\n\n⚠️注意：如果希望在 `onSubmitFail` 回调中正确接收到 `error` 对象，需要在 `submit` 函数中抛出一个 `SubmissionError` 类型的对象\n\n```jsx\nconst { SubmissionError } = Form;\n\nsubmit() {\n\t// do submit\n\t...\n\tthrow new SubmissionError('error message');\n}\n\nonSubmissionFail(submissionError) {\n\tif (submissionError && submissionError.errors === 'error message') {\n\t\t// do something\n\t}\n}\n```"},{"name":"**`Form.Field`**","content":{"name":{"说明":"表单元素名","类型":"string","是否必填":"是"},"component":{"说明":"真正的表单元素组件，负责表单元素如何展示。可以是字符串(标准 html 元素名), 或者 React 组件","类型":"string / React.Component","是否必填":"是"},"value":{"说明":"表单元素初始值","类型":"any","是否必填":"是"},"normalize":{"说明":"onChange 或者 onBlur 后格式化表单元素值","类型":"func(value, previousValue, nextValues, previousValues)","是否必填":"否"},"format":{"说明":"渲染前格式化表单元素值, 不影响真正存储的表单元素值","类型":"func(value, previousValue, nextValues, previousValues)","是否必填":"否"},"onChange":{"说明":"value 值修改后的回调，会在 Field 中封装一层。(自定义组件需要自己调用由 Field 组件封装后传入的 `props.onChange()` 后才会执行)","类型":"func(event, newValue, previousValue, preventSetValue)","是否必填":"否"},"onBlur":{"说明":"blur 后的回调（会在 Field 中封装一层）","类型":"func(event, newValue, previousValue, preventSetValue)","是否必填":"否"},"onFocus":{"说明":"focus 后的回调（会在 Field 中封装一层）","类型":"func(event)","是否必填":"否"},"validations":{"说明":"定义表单元素校验方法","类型":"object","是否必填":"否"},"validationErrors":{"说明":"定义表单元素检验方法对应的出错信息","类型":"object","是否必填":"否"},"validateOnChange":{"说明":"是否在触发change事件时执行表单校验","类型":"boolean","是否必填":"否"},"validateOnBlur":{"说明":"是否在触发blur事件时执行表单校验","类型":"boolean","是否必填":"否"},"clearErrorOnFocus":{"说明":"是否在触发focus事件时清空错误信息","类型":"boolean","是否必填":"否"},"asyncValidation":{"说明":"异步校验 func, 需要返回 Promise","类型":"func(values, value)","是否必填":"否"},"参数":{"说明":"说明","类型":"类型","是否必填":""},"------":{"说明":"------","类型":"------"},"isDirty":{"说明":"表单元素值被改变过","类型":"boolean"},"isActive":{"说明":"表单元素为input且获得了焦点","类型":"boolean","是否必填":""},"error":{"说明":"第一个校验错误文本信息（没有报错时为 null ）","类型":"string / Null","是否必填":""},"errors":{"说明":"校验错误文本信息数组（没有错误时为空数组）","类型":"array"}},"info":"所有需要维护 `value` 的表单元素组件都需要通过 `Field` 组件包装一下。\n在 `Field` 组件上可以传入以下 props ，`component` 以外的其他 props （包括自定义的 props ），都会传入到 `component` 中所定义的表单元素组件中：\n\n\n除了上述参数之外， `Field` 组件会隐含地向被包裹的表单元素组件中传入以下 props ：\n\n\n##### **获取 `Field` 对应 `component` 的实例**\n\n可以通过在 `Field` 上加上 `ref`，然后调用 `getWrappedComponent` 方法来获取。\n```\n<Field\n\tref={ref => { this.field = ref }}\n\tcomponent={XxxComponent}\n\t...\n/>\n\nconst component = field.getWrappedComponent();\n```"},{"name":"**`Form.getControlGroup`**","content":{"label":{"说明":"表单元素的label","类型":"string / React.Component","是否必填":"否"},"className":{"说明":"添加到control-group 上的额外类名，可以用来覆盖子元素的样式","类型":"string","是否必填":"否"},"helpDesc":{"说明":"表单元素的说明性文字","类型":"string / React.Component","是否必填":"否"},"notice":{"说明":"表单元素的重要提示性文字","类型":"string / React.Component","是否必填":"否"},"required":{"说明":"为 true 时会在 label 前添加红色的\"*\"","类型":"boolean","是否必填":"否"}},"info":"`getControlGroup` 是一个用来快速封装自定义组件的函数，它返回一个满足通用布局与样式要求（左侧标签 、右侧表单元素）的stateless functional component 。同时支持将 `Field` 中的 错误提示信息展示出来。 \n\n封装过的组件支持在 `Field` 上额外传入以下参数：\n\n\n##### **获取 `Control` 组件实例**\n\n参照上方获取 `Field` 对应 `component` 的实例，然后调用 `getControlInstance` 方法。\n```jsx\nconst component = field.getWrappedComponent().getControlInstance();\n```"},{"name":"**内置 validation rules**","content":{"required":{"说明":"是否必填","可传参数":"任意，传 true 是为了表意，传其他值也是当作必填，下同"},"isExisty":{"说明":"是否非 null ，非 undefined","可传参数":"任意"},"matchRegex":{"说明":"是否匹配指定正则表达式","可传参数":"Regex"},"isEmail":{"说明":"是否邮件类型字符串","可传参数":"任意"},"isUrl":{"说明":"是否 url 类型","可传参数":"任意"},"isTrue":{"说明":"是否true","可传参数":"任意"},"isFalse":{"说明":"是否false","可传参数":"任意"},"isNumeric":{"说明":"是否数字类型","可传参数":"任意"},"isInt":{"说明":"是否整数","可传参数":"任意"},"isFloat":{"说明":"是否小数","可传参数":"任意"},"isLenght":{"说明":"字符串或数组是否为指定长度","可传参数":"长度值(Number)"},"equals":{"说明":"是否与指定值相等","可传参数":"指定值"},"equalsField":{"说明":"是否与表单中的其他元素值相等","可传参数":"其他 Field 的name(String)"},"maxLength":{"说明":"字符串或数组不能超过指定长度","可传参数":"长度值(Number)"},"minLength":{"说明":"字符串或数组不能小于指定长度","可传参数":"长度值(Number)"}},"info":"可以直接在 `Field` 的 `validations` 属性中使用，使用方法参考[demo 常用表单校验](#biao-dan-xiao-yan-de-shi-yong)。内置规则如下："}]}]},{"name":"Grid 网格","content":"网格组件。\n\n功能和 [Table](table) 组件类似，`Grid` 是使用 `<table>` 标签实现的，而 `Table` 是使用 `div` + `flex` 布局实现的。","children":[{"name":"API","content":{"columns":{"说明":"表格列配置","类型":"array","默认值":"","是否必须":"是"},"datasets":{"说明":"需要展示的数据","类型":"array","默认值":"","是否必须":"是"},"rowKey":{"说明":"每一行的 key","类型":"string","默认值":"`id`","是否必须":"否"},"onChange":{"说明":"列表发生变化时自动触发的函数，页面筛选、排序均会触发","类型":"func","默认值":"`noop`","是否必须":"否"},"sortBy":{"说明":"根据哪一个字段排序, 应该等于columns中某一个元素的`key`字段","类型":"string","默认值":"''","是否必须":"否"},"sortType":{"说明":"排序方式","类型":"string","默认值":"''","是否必须":"否"},"emptyLabel":{"说明":"列表为空时的提示文案","类型":"string","默认值":"`'没有更多数据了'`","是否必须":"否"},"selection":{"说明":"表格的选择功能配置","类型":"object","默认值":"","是否必须":"否"},"loading":{"说明":"表格是否处于loading状态","类型":"bool","默认值":"`false`","是否必须":"否"},"className":{"说明":"自定义额外类名","类型":"string","默认值":"`''`","是否必须":"否"},"rowClassName":{"说明":"表格行的类名","类型":"string or func(data, index)","默认值":"''","是否必须":"否"},"prefix":{"说明":"自定义前缀","类型":"string","默认值":"`'zent'`","是否必须":"否"},"pageInfo":{"说明":"table对应的分页信息","类型":"object","默认值":"null","是否必须":"否"},"onRowClick":{"说明":"点击行时触发","类型":"func(data, index, event)","默认值":"","是否必须":"否"},"ellipsis":{"说明":"是否需要文字超出宽度后省略号显示 (需配置 columns 中的 nowrap)","类型":"bool","默认值":"false","是否必须":"否"}},"children":[{"name":"onChange函数声明","content":"onChange会抛出一个对象，这个对象包含分页变化的参数：\n\n```js\n{\n\tcurrent, // {Number} 表示当前第几页\n\tsortBy, // {String} 表示基于什么key进行排序\n\tsortType, // {String} ['asc', 'desc', ''] 排序的方式\n}\n```"},{"name":"columns","content":{"title":{"说明":"列头的名称","类型":"node","是否必须":"是"},"name":{"说明":"对应数据中的 key (建议设置) 支持 `a.b.c` 的嵌套写法","类型":"string","是否必须":"否"},"width":{"说明":"列表宽度","类型":"string or number","是否必须":"否"},"bodyRender":{"说明":"渲染复杂组件","类型":"func(data, pos, name) or node","是否必须":"否"},"className":{"说明":"列头的 className","类型":"string","是否必须":"否"},"needSort":{"说明":"是否支持排序 (使用此功能 请设置 name)","类型":"bool","是否必须":"否"},"colSpan":{"说明":"列合并 当为 0 时不渲染","类型":"number","是否必须":"否"},"fixed":{"说明":"是否固定列 可选值为 `left` `right` `true` (`true` 与 `left` 等效)","类型":"bool or strig","是否必须":"否"},"onCellClick":{"说明":"点击单元格回调","类型":"func(data, event)","是否必须":"否"},"textAlign":{"说明":"文本对齐方式","类型":"string","是否必须":"否"},"nowrap":{"说明":"是否换行 默认换行","类型":"bool","是否必须":"否"}}},{"name":"selection","content":{"selectedRowKeys":{"说明":"默认选中","类型":"array","是否必须":"否"},"onSelect":{"说明":"每次check的时候触发的函数","类型":"func(selectedKeys, selectedRows, currentRow)","是否必须":"否"},"getCheckboxProps":{"说明":"选择框属性配置 (当前仅支持 disabled)","类型":"func(data)","是否必须":"否"}}},{"name":"pageInfo","content":{"totalItem":{"说明":"总条目个数","类型":"number","是否必须":"否"},"pageSize":{"说明":"每页个数","类型":"number","是否必须":"否"},"current":{"说明":"当前页码","类型":"number","是否必须":"否"}}}]}]},{"name":"Icon 图标","content":"语义化的图标库。","children":[{"name":"使用指南","content":"-   部分图标分为实心和描线两个版本, 使用 `-o`（字母）来区分, e.g. `shop` (实心)和 `shop-o` (描线).\n-   命名规则: `icon名字-[variant(变体)]-[描线与否(o)]`."},{"name":"API","content":{"type":{"说明":"图标类型","类型":"string","默认值":"`''`"},"className":{"说明":"自定义额外类名","类型":"string","默认值":"`''`"}}}]},{"name":"InfiniteScroller 无限滚动组件","content":"无限滚动组件","children":[{"name":"使用指南","content":"-  常用于一个区域内内容的滚动加载"},{"name":"API","content":{"hasMore":{"说明":"是否可以调用loadMore回调","类型":"bool","默认值":"`true`","备选值":"`false`, `true`"},"loadMore":{"说明":"加载更多的回调函数，如果函数接收参数则会传入一个停止loading效果的回调","类型":"func(stopLoading)","默认值":"","备选值":""},"initialLoad":{"说明":"初始化时是否调用loadMore回调","类型":"bool","默认值":"`false`","备选值":"`false`, `true`"},"useWindow":{"说明":"是否监听window上的滚动事件，如果传入false，则监听该DOM元素上的滚动事件","类型":"bool","默认值":"`true`","备选值":"`false`, `true`"},"useCapture":{"说明":"滚动事件是否在事件捕获阶段接收","类型":"bool","默认值":"`false`","备选值":"`false`, `true`"},"loader":{"说明":"加载时显示的内容","类型":"node","默认值":"zent的Loading","备选值":"","undefined":""},"offset":{"说明":"触发滚动加载的阈值","类型":"number","默认值":"20","备选值":""},"className":{"说明":"自定义额外类名","类型":"string","默认值":"`''`","备选值":""},"prefix":{"说明":"自定义前缀","类型":"string","默认值":"`'zent'`","备选值":""}}},{"name":"loadMore","content":"当异步加载时，期望传入的loadMore函数的返回值是一个promise对象，用于组件控制loading的显示，否则需要使用loadMore的回调函数手动停止loading。"}]},{"name":"Input 输入框","content":"表单的输入组件，对原生input的包装，通过鼠标或键盘输入内容。","children":[{"name":"使用指南","content":"- 在表单输入时使用，可带前缀或后缀。\n- 可与其它组件组合使用，如组合成一个搜索输入框"},{"name":"API","content":{"className":{"说明":"自定义额外类名","类型":"string","默认值":"`''`","备选值":"","是否必填":"否"},"prefix":{"说明":"自定义类前缀","类型":"string","默认值":"`'zent'`","备选值":"","是否必填":"否"},"width":{"说明":"宽度","类型":"string or number","默认值":"","备选值":"","是否必填":"否"},"type":{"说明":"类型","类型":"string","默认值":"`'text'`","备选值":"`'number'`、`'password'`、`'textarea'`","是否必填":"否"},"defaultValue":{"说明":"默认值","类型":"string","默认值":"","备选值":"","是否必填":"否"},"value":{"说明":"输入值","类型":"string","默认值":"","备选值":"","是否必填":"否"},"readOnly":{"说明":"是否只读","类型":"bool","默认值":"`false`","备选值":"","是否必填":"否"},"disabled":{"说明":"是否禁用","类型":"bool","默认值":"`false`","备选值":"","是否必填":"否"},"placeholder":{"说明":"原生placeholder文案","类型":"string","默认值":"`''`","备选值":"","是否必填":"否"},"addonBefore":{"说明":"前置标签","类型":"node","默认值":"","备选值":"","是否必填":"否"},"addonAfter":{"说明":"后置标签","类型":"node","默认值":"","备选值":"","是否必填":"否"},"autoFocus":{"说明":"自动focus","类型":"bool","默认值":"`false`","备选值":"","是否必填":"否"},"autoSelect":{"说明":"自动select","类型":"bol","默认值":"`false`","备选值":"","是否必填":"否"},"initSelectionStart":{"说明":"初始被选中的第一个字符的位置","类型":"number","默认值":"","备选值":"","是否必填":"否"},"initSelectionEnd":{"说明":"初始被选中的最后一个字符的下一个位置。","类型":"number","默认值":"","备选值":"","是否必填":"否"},"onChange":{"说明":"change事件","类型":"func(e:Event)","默认值":"","备选值":"","是否必填":"否"},"onPressEnter":{"说明":"回车事件","类型":"func(e:Event)","默认值":"","备选值":"","是否必填":"否"}},"children":[{"name":"focus","content":"`focus(): void`\n\n手动聚焦到输入框"}],"info":"_除了以上属性外，所有react支持的input属性，Input组件都支持_"},{"name":"select","content":"`select(): void`\n\n选中输入框内所有内容\n\n`select(selectionStart?: number, selectionEnd?: number): void`\n\n选中区间范围在[selectionStart, selectionEnd]里的内容"}]},{"name":"Layout 布局","content":"24栅格布局组件","children":[{"name":"API","content":"","children":[{"name":"Row","content":{"className":{"说明":"额外的样式名","类型":"string","默认值":""},"prefix":{"说明":"UI 前缀","类型":"string","默认值":"`'zent'`"}}},{"name":"Col","content":{"span":{"说明":"col所占的栅格数","类型":"number","默认值":""},"offset":{"说明":"col左偏移的栅格数","类型":"number","默认值":""},"className":{"说明":"额外的样式名","类型":"string","默认值":""},"prefix":{"说明":"UI 前缀","类型":"string","默认值":"`'zent'`"}}}]}]},{"name":"Loading 等待","content":"等待，用于页面或者区块的等待状态。","children":[{"name":"使用指南","content":"-  当页面处于渲染中或者加载异步数据时，可以使用此组件减少用户等待时的焦虑感。"},{"name":"API","content":{"show":{"说明":"显示控制","类型":"bool","默认值":"`false`"},"float":{"说明":"是否脱离文档流，一般全局加载的时候设置为 `true`","类型":"bool","默认值":"`false`"},"height":{"说明":"float 为 false 时设置高度，如果包裹了组件，将会表现为组件高度，否则将会使用默认高度","类型":"number","默认值":"`160`"},"zIndex":{"说明":"设置 z-index","类型":"number","默认值":"`9998`"},"className":{"说明":"自定义额外类名","类型":"string","默认值":"`''`"},"containerClass":{"说明":"自定义额外类名，外部包裹的容器使用","类型":"string","默认值":"`''`"},"prefix":{"说明":"自定义前缀","类型":"string","默认值":"`'zent'`"}}}]},{"name":"Menu 菜单","content":"菜单，为页面提供导航的菜单","children":[{"name":"API","content":"","children":[{"name":"Menu","content":{"onClick":{"说明":"点击菜单节点回调","类型":"func","默认值":""},"className":{"说明":"节点类名","类型":"string","默认值":""},"prefix":{"说明":"自定义前缀","类型":"string","默认值":"'zent'"}}},{"name":"MenuItem","content":{"key":{"说明":"item 的唯一标志","类型":"string","默认值":"内部生成的唯一ID"},"disabled":{"说明":"是否禁用当前菜单项","类型":"bool","默认值":""},"className":{"说明":"节点自定义类名","类型":"string","默认值":""},"prefix":{"说明":"节点自定义前缀","类型":"string","默认值":"'zent'"}}},{"name":"SubMenu","content":{"title":{"说明":"子菜单项显示值","类型":"string","默认值":""},"disabled":{"说明":"是否禁用当前子菜单","类型":"bool","默认值":""},"overlayClassName":{"说明":"弹出菜单的自定义类名","类型":"string","默认值":""},"className":{"说明":"子菜单项自定义类名","类型":"string","默认值":""},"prefix":{"说明":"子菜单项自定义前缀","类型":"string","默认值":"'zent'"}}}]},{"name":"FAQ","content":"- 菜单组件使用统一代理的点击事件回调函数, 其参数为 event 和 key(实际上是节点的 index 属性值)。\n- 当 MenuItem 不设置 `key` 属性时的会按顺序和层级自动生成节点的唯一标识(从0开始)并保存在 `index` 属性上, 作为 `onClick` 函数的第二个参数。\n  如果手动设置了 `key` 属性则会被复制到 `index` 属性, 覆盖自动生成的标识。建议在Menu不复杂的情况下手动为 MenuItem 设置格式合理的 `key` 属性。\n  \n  ```\n\t<Menu>\n\t\t<MenuItem>   -------- 'item_0'\n\t\t<SubMenu>\n\t\t\t<MenuItem> -------- 'item_1_0'\n\t\t\t<MenuItem> -------- 'item_1_1'\n\t\t</SubMenu>\n\t\t<MenuItem>   -------- 'item_2'\n\t</Menu>\n\t```"}]},{"name":"Notify 消息通知","content":"全局展示通知提醒信息。","children":[{"name":"使用指南","content":"- 主要用于提示简要的文字信息。"},{"name":"API","content":{"text":{"说明":"通知文案","类型":"node","默认值":"`''`"},"duration":{"说明":"持续时间","类型":"number","默认值":"`2000`"},"callback":{"说明":"关闭时的回调","类型":"func","默认值":""}},"info":"- `Notify.success(text: node, duration?: number, callback?: () => ()): number`\n- `Notify.error(text: node, duration?: number, callback?: () => ()): number`\n\n`Notify.success` 和 `Notify.error` 方法会返回一个 `id`，这个 `id` 可以作为 `Notify.clear(id)` 的入参，用于关闭指定notify。\n\n\n- `Notify.clear(number: id): void`\n\n如果 `Notify.clear` 调用时没有传入 `id` 参数，所有当前未关闭的实例都会被关闭。\n\n- `Notify.config(options): void`\n\n`options` 当前只支持一个设置：`duration`，可以用来全局设置 `Notify` 的关闭延迟时间。"}]},{"name":"NumberInput 数值输入框","content":"数字输入组件，通过鼠标或键盘输入内容。","children":[{"name":"使用指南","content":"- 输入内容仅为数字时，使用数字输入框比普通文本输入框更方便。"},{"name":"API","content":{"value":{"说明":"输入值","类型":"number","默认值":"","备选值":"","是否必填":"否"},"onChange":{"说明":"change事件","类型":"func(e:Event)","默认值":"","备选值":"","是否必填":"否"},"showStepper":{"说明":"是否开启记步器","类型":"bool","默认值":"`false`","备选值":"","是否必填":"否"},"decimal":{"说明":"数值精度","类型":"number","默认值":"","备选值":"","是否必填":"否"},"min":{"说明":"数值范围最小值","类型":"number","默认值":"","备选值":"","是否必填":"否"},"max":{"说明":"数值范围最大值","类型":"number","默认值":"","备选值":"","是否必填":"否"},"placeholder":{"说明":"原生placeholder文案","类型":"string","默认值":"`''`","备选值":"","是否必填":"否"},"disabled":{"说明":"是否禁用","类型":"bool","默认值":"`false`","备选值":"","是否必填":"否"},"className":{"说明":"自定义额外类名","类型":"string","默认值":"`''`","备选值":"","是否必填":"否"},"width":{"说明":"宽度","类型":"string or number","默认值":"","备选值":"","是否必填":"否"},"prefix":{"说明":"自定义类前缀","类型":"string","默认值":"`'zent'`","备选值":"","是否必填":"否"}}}]},{"name":"Pagination 分页","content":"分页组件","children":[{"name":"使用指南","content":"- 展示条目的总数量必须已知"},{"name":"API","content":{"current":{"说明":"当前页数","类型":"number","默认值":"`1`","是否必填":"是"},"totalItem":{"说明":"总个数","类型":"number","默认值":"","是否必填":"是"},"pageSize":{"说明":"每页个数","类型":"number, array","默认值":"`10`","是否必填":"否"},"maxPageToShow":{"说明":"最大可显示页数","类型":"number","默认值":"","是否必填":"否"},"onChange":{"说明":"翻页回调","类型":"function","默认值":"","是否必填":"否"},"className":{"说明":"自定义额外类名","类型":"string","默认值":"`''`","是否必填":"否"},"prefix":{"说明":"自定义前缀","类型":"string","默认值":"`'zent'`","是否必填":"否"}},"children":[{"name":"关于 `pageSize` 属性","content":"pageSize 属性支持3种格式：\n\n- number: `30`\n\n- arrayOf(number): `[10,20,30]`\n\n初始值为 10\n\n- `[10, 20, { value: 30, isCurrent: true }]`\n\n初始值为 30"}]},{"name":"组件原理","content":"- 组件结构上分为 core-pagination 和 zent-pagination\n\n前者是核心的分页组件, 只提供分页功能, 后者是基于前组件的扩展, 模拟 www 的交互\n\n- 组件内置独立的 parser 模块作为数据的中台, 将输入的条目信息统一为 `renderData`."},{"name":"parser 的输入与输出","content":"","children":[{"name":"输入","content":"```\n{ total: 20, current: 4 }\n```"},{"name":"输出","content":"```javascript\n[{\n  'content': '上一页',\n  'target': 3\n}, {\n  'content': '1',\n  'target': 1\n}, {\n  'content': '...',\n}, {\n  'content': '3',\n  'target': 3,\n}, {\n  'content': '4',\n  'target': 4,\n  'current': true,\n}, {\n  'content': '5',\n  'target': 5\n}, {\n  'content': '...',\n  'target': 6\n}, {\n  'content': '20'\n  'target': 20\n}, {\n  'content': '下一页'\n  'target': 5\n}];\n```"}]}]},{"name":"气泡提示 Pop","content":"气泡提示组件","children":[{"name":"使用指南","content":"- 多种触发方式：点击，鼠标移入，获得输入焦点\n- 支持 Tooltip 的使用方式\n- 支持对浮层上的元素进行操作, 可以承载相对复杂的内容, 比如链接、按钮等"},{"name":"API","content":{"content":{"说明":"弹层的内容","类型":"node","是否必须":"是","默认值":"","备选值":""},"trigger":{"说明":"触发方式","类型":"string","是否必须":"否","默认值":"`'none'`","备选值":"`'click'`, `'hover'`, `'focus'`"},"position":{"说明":"弹出框的位置，命名规则：相对触发元素的位置+箭头相对于Pop的位置","类型":"string","是否必须":"否","默认值":"`'top-center'`","备选值":""},"centerArrow":{"说明":"是否按小箭头居中对齐trigger来定位","类型":"bool","是否必须":"否","默认值":"`false`","备选值":""},"header":{"说明":"用户可以自定义头部","类型":"node","是否必须":"否","默认值":"","备选值":""},"block":{"说明":"弹层在文档流里是否以块级元素出现","类型":"bool","是否必须":"否","默认值":"`false`","备选值":""},"onShow":{"说明":"弹层打开后的回调函数","类型":"func","是否必须":"否","默认值":"`noop`","备选值":""},"onClose":{"说明":"弹层关闭后的回调函数","类型":"func","是否必须":"否","默认值":"`noop`","备选值":""},"onBeforeShow":{"说明":"弹层打开前的回调函数，只有用户触发的打开操作才会调用，外部设置`visible`不会调用","类型":"func","是否必须":"否","默认值":"`noop`","备选值":""},"onBeforeClose":{"说明":"弹层关闭前的回调函数, 只有用户触发的关闭操作才会调用，外部设置`visible`不会调用","类型":"func","是否必须":"否","默认值":"`noop`","备选值":""},"onConfirm":{"说明":"用户自定义回调，设置以后pop 表现为confirm","类型":"func","是否必须":"否","默认值":"","备选值":""},"onCancel":{"说明":"用户使用 confirm 的时候可自定义取消的回调","类型":"func","是否必须":"否","默认值":"","备选值":""},"confirmText":{"说明":"用户自定义按钮名","类型":"string","是否必须":"否","默认值":"`'确定'`","备选值":""},"cancelText":{"说明":"用户自定义取消按钮","类型":"string","是否必须":"否","默认值":"`'取消'`","备选值":""},"type":{"说明":"影响确定按钮的样式","类型":"string","是否必须":"否","默认值":"`'primary'`","备选值":"`'default'`, `'danger'`, `'success'`"},"visible":{"说明":"外部维护 `Pop` 的显示状态，此时外部拥有 `Pop` 的全部控制权，必须和 `onVisibleChange` 一起使用","类型":"bool","是否必须":"否","默认值":"","备选值":""},"onVisibleChange":{"说明":"和 `visible` 一起使用","类型":"func","是否必须":"否","默认值":"","备选值":""},"className":{"说明":"自定义类名","类型":"string","是否必须":"否","默认值":"`''`","备选值":""},"wrapperClassName":{"说明":"自定义trigger包裹节点的类名","类型":"string","是否必须":"否","默认值":"`''`","备选值":""},"prefix":{"说明":"自定义前缀","类型":"string","是否必须":"否","默认值":"`'zent'`","备选值":""}},"children":[{"name":"Click","content":{"closeOnClickOutside":{"说明":"点击弹层和trigger节点外部时自动关闭","类型":"bool","是否必须":"否","默认值":"`true`"},"isOutside":{"说明":"用来判断点击目标是否在外面的可选函数","类型":"func","是否必须":"否","默认值":""}}},{"name":"Hover","content":{"mouseEnterDelay":{"说明":"hover打开的延迟（单位：毫秒）","类型":"number","是否必须":"否","默认值":"`200`"},"mouseLeaveDelay":{"说明":"关闭的的延迟（单位：毫秒）","类型":"number","是否必须":"否","默认值":"`200`"},"isOutside":{"说明":"用来判断点击目标是否在外面的可选函数","类型":"func","是否必须":"否","默认值":""},"quirk":{"说明":"开启 Popover 的 quirk 模式，该模式下判断关闭条件时不需要先从内部移动出去","类型":"bool","是否必须":"否","默认值":"`true`"}}},{"name":"None","content":"这种模式下 `onConfirm` 和 `onCancel` 不会自动关闭 `Pop`, 需要使用者自己在回调中控制 `visible` 来关闭 `Pop`."},{"name":"withPop 高阶组件","content":{"open":{"说明":"打开 Pop","类型":"func"},"close":{"说明":"关闭 Pop","类型":"func"}},"info":"这个高阶组件暴露了 `Pop` 内部的几个重要方法, 可能的使用场景: 在 `content` 内部手动关闭弹层."}],"info":"根据 `trigger` 值的不同, `Pop` 提供了一些额外的控制参数."},{"name":"FAQ","content":"","children":[{"name":"centerArrow","content":"默认情况下, `Pop` 根据 `position` 对齐的是弹层和trigger的边缘, 除了 `postion` 为 `'*-center'` 的情况下, 弹层上的小箭头和弹层边缘的间距是固定的, 因而在 trigger 特别小的情况下箭头会对齐到 trigger 外部. 这种情况下可以设置 `centerArrow` 为 `true`, 不管trigger大小如何, 箭头永远对齐在trigger中间, 弹层再相对箭头做定位."},{"name":"onConfirm 和 onCancel","content":"支持异步响应，此时按钮会变成loading状态。\n\n- 如果返回 `Promise`, `Pop` 会在 `Promise` `resolve` 后关闭.\n- 也支持参数形式的异步响应, 此时接受一个参数 `close`, 需要在函数内手动调用 `close` 函数."}]}]},{"name":"Popover 弹层","content":"通用的触发式弹层组件, 可以自定义定位算法、触发方式以及弹层显示方式。\n\n组件支持自身多层嵌套。\n\n**这个组件不提供样式, 气泡提示组件请使用 `Pop`。**","children":[{"name":"使用场景","content":"* 如果 `Pop` 组件提供的功能无法满足你的需求，需要实现自定义的触发式弹层时可以使用 `Popover` 来简化开发。\n* 可以当做 `Dropdown` 使用。"},{"name":"API","content":{"position":{"说明":"定位的方式, 参见 `Popover.Positon`","类型":"Positon","默认值":"","备选值":""},"cushion":{"说明":"可选, 定位的偏移量, 通常用来预留空间给小箭头等东西","类型":"number","默认值":"`0`","备选值":""},"display":{"说明":"可选, 在文档流里的出现形式","类型":"string","默认值":"`'block'`","备选值":"所有CSS中合法的 `display` 值"},"onShow":{"说明":"可选, 弹层显示后的回调函数","类型":"func","默认值":"`noop`","备选值":""},"onClose":{"说明":"可选, 弹层关闭后的回调函数","类型":"func","默认值":"`noop`","备选值":""},"onBeforeShow":{"说明":"可选, 弹层打开前的回调函数, 只有用户触发的打开操作才会调用, 外部设置 `visible` 不会调用","类型":"func","默认值":"`noop`","备选值":""},"onBeforeClose":{"说明":"可选, 弹层关闭后的回调函数, 只有用户触发的关闭操作才会调用, 外部设置 `visible` 不会调用","类型":"func","默认值":"`noop`","备选值":""},"containerSelector":{"说明":"可选, 弹层的父节点CSS selector","类型":"string","默认值":"`'body'`","备选值":"所有合法的CSS selector"},"visible":{"说明":"可选, 手动控制弹层的显示隐藏, 必须和 `onVisibleChange` 一起使用","类型":"bool","默认值":"","备选值":""},"onVisibleChange":{"说明":"可选, 手动控制时的回调函数, 必须和`visible`一起使用, 只有用户手动触发的打开／关闭操作才会调用","类型":"func","默认值":"","备选值":""},"className":{"说明":"可选, 自定义额外类名","类型":"string","默认值":"`''`","备选值":""},"wrapperClassName":{"说明":"可选, trigger外层包裹div的类名","类型":"string","默认值":"`''`","备选值":""},"width":{"说明":"可选, 宽度","类型":"string or number","默认值":"","备选值":""},"prefix":{"说明":"可选, 自定义前缀","类型":"string","默认值":"`'zent'`","备选值":""}},"children":[{"name":"Trigger.Click","content":{"autoClose":{"说明":"可选, 是否点击‘外面’自动关闭弹层","类型":"bool","默认值":"`true`"},"isOutside":{"说明":"可选, 判断一个节点是否在‘外面’, 点击在外面会关闭弹层。默认trigger和弹层以外的节点都是‘外面’","类型":"func: (node, data) => bool","默认值":"`() => false`"}},"info":"isOutside 的 `data` 包含两个属性：`contentNode` 和 `triggerNode`。"},{"name":"Trigger.Hover","content":{"showDelay":{"说明":"可选, 打开弹层前的延迟（单位毫秒）, 如果在这段时间内鼠标移出弹层范围, 弹层不会打开","类型":"number","默认值":"`150`"},"hideDelay":{"说明":"可选, 关闭弹层前的延迟（单位毫秒）, 如果在这段时间内鼠标重新移入弹层范围, 弹层不会关闭","类型":"number","默认值":"`150`"},"isOutside":{"说明":"可选, 判断一个节点是否在‘外面’。默认 trigger 和弹层以外的节点都是‘外面’","类型":"func: (node, data) => bool","默认值":""},"quirk":{"说明":"可选，quirk 模式，该模式下触发关闭时不要求鼠标先从 trigger 和弹层里面出去","类型":"bool","默认值":"`false`"}},"info":"isOutside 的 `data` 包含两个属性：`contentNode` 和 `triggerNode`。"},{"name":"Trigger.Focus","content":"当获取焦点时显示，失去焦点时关闭，没有参数。"},{"name":"Trigger.Base","content":{"getTriggerNode":{"说明":"获取trigger的DOM node","类型":"func: () => node"},"getContentNode":{"说明":"获取弹层的DOM node","类型":"func: () => node"},"open":{"说明":"打开弹层","类型":"func"},"close":{"说明":"关闭弹层","类型":"func"},"contentVisible":{"说明":"弹层当前是否打开","类型":"bool"},"onTriggerRefChange":{"说明":"trigger的ref改变的时候需要调用的回掉函数, 只有在重写 render 函数的时候需要这个函数","类型":"func:(instance)"}},"info":"所有trigger的基类, 实现自定义 trigger 需继承这个类, 继承时一般需要重写 `getTriggerProps` 方法给 trigger 添加事件, 然后在事件\n处理函数控制弹层的开/闭."},{"name":"Position API","content":"Positon用于给弹层提供定位的, 内置12种基础定位, 可以添加自定义定位算法. Popover 上的 `cushion` 参数会影响定位, 通常用来提供一定量的偏移量。\n\n```\n                    TopLeft     TopCenter     TopRight\n\nLeftTop                                                             RightTop\n\n\nLeftCenter                                                          RightCenter\n\n\nLeftBottom                                                          RightBottom\n\n                BottomLeft     BottomCenter     BottomRight\n```\n\n除了这12种基础定位算法外，还提供了6个会自动根据屏幕剩余空间自动判断合适位置的定位算法: `AutoBottomLeft`，`AutoBottomCenter`, `AutoBottomRight`, `AutoTopLeft`, `AutoTopCenter` 以及 `AutoTopRight`，这些算法适用于下拉式组件。\n\n每个定位算法的对象上都有一个 `locate` 函数，通过这个函数可以实现定位算法的组合。\n\n```jsx\nPopover.Position.create((anchorBoundingBox, containerBoundingBox, contentDimension, options) => {\n  if (someCondition) {\n\t  return Popover.Position.BottomLeft.locate(anchorBoundingBox, containerBoundingBox, contentDimension, options);\n  }\n\n  return Popover.Position.TopRight.locate(anchorBoundingBox, containerBoundingBox, contentDimension, options);\n});\n```"},{"name":"Position.create","content":"通过这个工厂函数创建自定义的 position, 这个函数接受一个函数作为参数，示例：\n\n```jsx\n// a bounding box is an object with these fields: {top, left, right, bottom, width, height}\nconst position = Popover.Position.create((anchorBoundingBox, containerBoundingBox, contentDimension, options) => {\n  return {\n    getCSSStyle() {\n      return {\n        position: 'fixed',\n        left: 0,\n        top: 0,\n        opacity: 0\n      };\n    },\n\n    name: 'position-example'\n  };\n});\n```\n\nanchor 是指 trigger，container 是指离弹层最近的有定位的父节点。\n\n`anchorBoundingBox` 和 `containerBoundingBox` 是相对于 container 左上角的坐标。\n\n`contentDimension` 是弹层的宽高.\n\n`options` 包含了其它可能有用的参数:\n* `options.cushion` Props 上传进来的定位偏移量\n* `options.anchor` anchor 的 DOM 节点\n* `options.container` container 的 DOM 节点\n* `options.anchorBoundingBoxViewport` anchor 相对于 viewport 的坐标\n* `options.containerBoundingBoxViewport` container 相对于 viewport 的坐标"},{"name":"withPopover 高阶组件","content":{"getTriggerNode":{"说明":"获取 trigger 的 DOM node","类型":"func: () => node"},"getContentNode":{"说明":"获取弹层的 DOM node","类型":"func: () => node"},"open":{"说明":"打开弹层","类型":"func"},"close":{"说明":"关闭弹层","类型":"func"}},"info":"这个高阶组件暴露了 `Popover` 内部的几个重要方法, 可能的使用场景: 在 `Content` 内部手动关闭弹层.\n\n\n示例：\n\n```jsx\n// 点击close按钮可以关闭弹层\nconst HoverContent = withPopover(function HoverContent({ popover }) {\n  return (\n    <div>\n      <div>popover content</div>\n      <button onClick={popover.close}>close</button>\n    </div>\n  );\n});\n\n<Popover position={Popover.Position.RightTop} display=\"inline\">\n  <Popover.Trigger.Hover showDelay={500} hideDelay={200}>\n    <button style={{ marginLeft: 100 }}>hover on me</button>\n  </Popover.Trigger.Hover>\n  <PopoverContent>\n    <HoverContent />\n  </PopoverContent>\n</Popover>\n```"}],"info":"`onBeforeShow` 和 `onBeforeClose` 可以返回一个 `Promise`，`Popover` 会在 `Promise` resolve 后打开/关闭，如果 `Promise` reject 的话打开/关闭操作终止。\n\n如果你不使用 `Promise`，`onBeforeShow` 和 `onBeforeClose` 也提供两个可选的参数 `callback` 以及 `escapse`，如果有这两参数的话，你必须在 `onBeforeShow` 和 `onBeforeClose` 里面手动调用 `callback` 才会打开/关闭，如果要终止打开/关闭操作需要手动调用 `escape`。\n\n`onBeforeShow(callback: ?function, escape: ?escape): ?Promise`\n\n每种 trigger 都有特有的 API 来控制组件行为, 自定义 trigger 可以按需指定 trigger 的参数."}]},{"name":"Portal 传送门","content":"传送门组件。","children":[{"name":"使用场景","content":"这个组件不提供样式，但它是所有弹层组件的基石。使用 `Portal` 的好处是不需要自己管理动态插入的节点，防止内存泄露。"},{"name":"API","content":{"children":{"说明":"必填参数, 只支持一个child","类型":"string","默认值":"","备选值":""},"selector":{"说明":"可选参数, 渲染child的DOM节点","类型":"string or DOM Element","默认值":"`'body'`","备选值":"合法的CSS selector或者某个DOM节点"},"visible":{"说明":"可选参数, 是否渲染child","类型":"bool","默认值":"`true`","备选值":""},"className":{"说明":"可选参数, 自定义额外类名","类型":"string","默认值":"`''`","备选值":""},"css":{"说明":"可选参数, 额外的css样式. 例如, `{ 'margin-left': '10px' }`","类型":"object","默认值":"`{}`","备选值":""},"prefix":{"说明":"可选参数, 自定义前缀","类型":"string","默认值":"`'zent'`","备选值":""}},"children":[{"name":"withESCToClose","content":{"visible":{"说明":"必填参数, 注意这个属性原始的Portal是可选的","类型":"bool","默认值":"`true`"},"onClose":{"说明":"必填参数, ESC按下是的回调函数","类型":"func","默认值":"","undefined":""}},"info":"封装了按ESC关闭的逻辑.\n\n\n```jsx\nimport { Portal as _Portal } from 'zent';\nconst { withESCToClose } = _Portal;\nconst Portal = withESCToClose(_Portal);\n```"},{"name":"withNonScrollable","content":{"visible":{"说明":"必填参数, 注意这个属性原始的Portal是可选的","类型":"bool","默认值":"`true`"}},"info":"封装了禁止container滚动的逻辑.\n\n\n```jsx\nimport { Portal as _Portal } from 'zent';\nconst { withNonScrollable } = _Portal;\nconst Portal = withNonScrollable(_Portal);\n```"}],"info":"`Portal` 另外还提供了几个高阶组件(HOC)，提供了一些弹层常用的逻辑。"},{"name":"组件原理","content":"- 组件的主要功能是把其 `child` 插入到一个给定的 DOM node中, 并且在组件被 `unmount` 的时候将其 `child` 属性对应的 DOM 节点删除.\n- 任意 props 被修改后会触发一定程度的重绘, `children`, `selector`被修改会导致组件 `unmount` 再 `mount`；其它props被修改仅更新现有 DOM node 的属性."},{"name":"已知问题","content":"-  在 Portal 的 `children` 上使用字符串形式的 `ref` 会报错, 可以使用函数形式的 `ref` 绕过这个问题. 其原因是 Portal 的 `children` 没有owner, 使用函数形式的`ref`可以绕过这个问题的原因参见[ Here](https://github.com/facebook/react/blob/v15.0.2/src/renderers/shared/reconciler/ReactRef.js#L18). 此外官方也不鼓励使用字符串形式的 `ref`.\n\n-  `15.0.2` 版本的 React 有个 bug 会导致某些情况下依赖 `state` 的 `context` 不更新 (参考 example: 02-context), 请等待 React 版本的统一升级."}]},{"name":"previewImage 图片预览","content":"这是一个图片预览组件。","children":[{"name":"使用指南","content":"-  用于缩略图放大预览显示\n-  支持图片上一张、下一张、翻转功能"},{"name":"API","content":{"images":{"说明":"待预览图片url","类型":"array","默认值":"","备选值":""},"index":{"说明":"显示第几张，从0开始","类型":"number","默认值":"0","备选值":""},"showRotateBtn":{"说明":"是否显示翻转按钮","类型":"bool","默认值":"true","备选值":"true,false"},"className":{"说明":"可选，自定义类名","类型":"string","默认值":"`''`","备选值":""},"prefix":{"说明":"可选，自定义前缀","类型":"string","默认值":"`'zent'`","备选值":""}}}]},{"name":"Progress 进度条","content":"进度条，用来表示操作的当前进度和状态。","children":[{"name":"使用指南","content":"-  用于时间较长的操作，为用户显示当前操作的进度和状态。\n-  可显示操作进度的百分比。"},{"name":"API","content":{"type":{"说明":"进度条样式","类型":"string","默认值":"`'line'`","可选值":"`'circle'`"},"percent":{"说明":"百分比","类型":"number","默认值":"`0`","可选值":""},"status":{"说明":"状态","类型":"string","默认值":"","可选值":"`'success'`,`'exception'`"},"showInfo":{"说明":"是否显示状态信息","类型":"boolean","默认值":"`true`","可选值":"`false`"},"format":{"说明":"文字模板函数","类型":"func","默认值":"内置函数","可选值":""},"strokeWidth":{"说明":"线条宽度，单位px","类型":"number","默认值":"`10`","可选值":""},"width":{"说明":"圆形进度条直径/条形进度条总长度","类型":"number","默认值":"`132(type=circle), 580(type=line)`","可选值":""},"bgColor":{"说明":"背景颜色","类型":"string","默认值":"`'#f8f8f8'`","可选值":""},"normalColor":{"说明":"进度条色彩","类型":"string","默认值":"`'#f44'`","可选值":""},"successColor":{"说明":"成功状态下的的进度颜色和图标颜色","类型":"string","默认值":"`'#4b0'`","可选值":""},"exceptionColor":{"说明":"错误状态的进度调颜色和图标颜色（如果未指定，使用`normalColor`）","类型":"string","默认值":"`'#f44'`","可选值":""},"className":{"说明":"自定义额外类名","类型":"string","默认值":"","可选值":""},"prefix":{"说明":"自定义前缀","类型":"string","默认值":"`'zent'`","可选值":""}}}]},{"name":"Radio 单选","content":"`RadioGroup` 是一个[受控组件][https://facebook.github.io/react/docs/forms.html#controlled-components], 必须要设置 `onChange` 回调方法在组件外部处理 `value` 变化.","children":[{"name":"API","content":"","children":[{"name":"RadioGroup","content":{"value":{"说明":"用于设置当前选中的值","类型":"any","默认值":""},"onChange":{"说明":"选项变化时的回调函数","类型":"func(e: event)","默认值":""},"isValueEqual":{"说明":"可选参数，判断value值是否相等","类型":"func(a, b)","默认值":"`(a, b) => a === b`"},"className":{"说明":"自定义额外类名","类型":"string","默认值":""},"prefix":{"说明":"自定义前缀","类型":"string","默认值":"`'zent'`"}}},{"name":"Radio","content":{"value":{"说明":"根据 value 进行比较，判断是否选中","类型":"any","默认值":""},"className":{"说明":"自定义额外类名","类型":"string","默认值":""},"width":{"说明":"宽度","类型":"string or number","默认值":""},"prefix":{"说明":"自定义前缀","类型":"string","默认值":"`'zent'`"}}}]}]},{"name":"SearchInput 搜索框组件","content":"带搜索框的 Input 组件.","children":[{"name":"API","content":{},"info":"API 和 [Input 组件](input)一致, 但是不支持 `type` 参数."}]},{"name":"Select 下拉选择","content":"下拉选择，提供多种选择器功能。","children":[{"name":"使用指南","content":"组件分层：主要分成 Select, Popup, Trigger 三个模块","children":[{"name":"Select","content":"核心控制器，主要职责是格式化数据，负责 Popup 和 Trigger 间的数据传输"},{"name":"Popup","content":"选项列表弹出层，主要负责展示选项，数据过滤控制"},{"name":"Trigger","content":"- 触发器，暴露给使用者，可以通过 trigger 属性进行配置\n- 核心的 trigger 有 SelectTrigger 和 InputTrigger\n- TagsTrigger 是基于 InputTrigger 扩展出来的拥有多选功能的 trigger\n- 使用者可以自行扩展或开发 trigger"}]},{"name":"API","content":{"data":{"说明":"选项数据","类型":"array","默认值":"`[]`","是否必填":"是"},"value":{"说明":"选中的值，当为tags类型时，可以传入数组","类型":"any","默认值":"`null`","是否必填":"否"},"index":{"说明":"选中索引","类型":"any","默认值":"`null`","是否必填":"否"},"disabled":{"说明":"禁用组件","类型":"bool","默认值":"`false`","是否必填":"否"},"placeholder":{"说明":"默认提示文案","类型":"string","默认值":"`'请选择'`","是否必填":"否"},"searchPlaceholder":{"说明":"搜索框默认文案","类型":"string","默认值":"`''`","是否必填":"否"},"emptyText":{"说明":"空列表提示文案","类型":"string","默认值":"`'没有找到匹配项'`","是否必填":"否"},"trigger":{"说明":"自定义触发器","类型":"function","默认值":"`Select.SelectTrigger`","是否必填":"否"},"optionText":{"说明":"自定义选项显示文案对应的key, 如{ id: 1, name: '文案' }, 设置optionText=\"name\"","类型":"string","默认值":"`'text'`","是否必填":"否"},"optionValue":{"说明":"自定义选项的值对应的key, 如{ id: 1, name: '文案' }, 设置optionValue=\"id\"","类型":"string","默认值":"`'value'`","是否必填":"否"},"onChange":{"说明":"选择变更后的回调函数","类型":"function","默认值":"`noop`","是否必填":"否"},"onDelete":{"说明":"删除标签后的回调函数","类型":"function","默认值":"`noop`","是否必填":"否"},"filter":{"说明":"过滤条件，设置以后才会开启过滤功能","类型":"function","默认值":"`null`","是否必填":"否"},"maxToShow":{"说明":"在有过滤条件时，设置 Option 的最大显示数量","类型":"number","默认值":"","是否必填":"否"},"onAsyncFilter":{"说明":"异步设置过滤后的数据","类型":"function","默认值":"`null`","是否必填":"否"},"onEmptySelected":{"说明":"选中过滤条件为空时的回调","类型":"function","默认值":"`noop`","是否必填":"否"},"onOpen":{"说明":"展开时的回调","类型":"function","默认值":"`noop`","是否必填":"否"},"className":{"说明":"可选，自定义trigger额外类名","类型":"string","默认值":"`''`","是否必填":"否"},"popupClassName":{"说明":"可选，自定义popup的类名","类型":"string","默认值":"`''`","是否必填":"否"},"autoWidth":{"说明":"是否自动设置弹出层与输入框等宽","类型":"bool","默认值":"`false`","是否必填":"否"},"width":{"说明":"输入框宽度","类型":"string or number","默认值":"","是否必填":"否"},"prefix":{"说明":"自定义前缀","类型":"string","默认值":"`'zent'`","是否必填":"否"}},"info":"如果 `data` 和 `children` 两种方式同时使用，`data` 会将 `children` 覆盖，主要是为了可以接收异步数据直接改变 `data` 属性来改变选项。"},{"name":"Trigger开发API","content":"| 参数 | 说明 | 类型 | 默认值 | 是否必填 |\n|------|------|------|--------|--------|\n| selectedItems | 已选择的条目 | array | `[]` | 否 |\n| extraFilter | 是否自带过滤功能 | boolean | `false` | 否 |\n| open | 是否打开Popup | boolean | `false` | 否 |\n\nTrigger 可以通过调用 `this.props.onChange({...})` 通过改变 Popup 的 props 实现参数传递。 "}]},{"name":"SKU 规格选择器","content":"这是一个规格选择","children":[{"name":"使用场景","content":"创建有多种规格的商品、服务的编辑页面"},{"name":"API","content":{"className":{"说明":"自定义额外类名","类型":"string","默认值":"`''`","备选值":""},"value":{"说明":"当前选中的sku列表","类型":"array","默认值":"`[]`","备选值":""},"maxSize":{"说明":"最大规格名称数","类型":"number","默认值":"`3`","备选值":""},"maxSKUTextLength":{"说明":"规格名称文字最大长度","类型":"number","默认值":"`4`","备选值":""},"maxLeafTextLength":{"说明":"规格值文字最大长度","类型":"number","默认值":"`20`","备选值":""},"skuTree":{"说明":"可选的规格列表","类型":"array","默认值":"`[]`","备选值":""},"optionValue":{"说明":"自定义sku的id的key值","类型":"string","默认值":"`'id'`","备选值":""},"optionText":{"说明":"自定义sku的文案的key值","类型":"string","默认值":"`'text'`","备选值":""},"onFetchGroup":{"说明":"异步获取可选的规格列表，如“颜色”、“尺寸”","类型":"function","默认值":"`Promise`","备选值":""},"onFetchSKU":{"说明":"异步获取单个规格可选的值，如“红色”、“蓝色”","类型":"function","默认值":"`Promise`","备选值":""},"onCreateGroup":{"说明":"创建新的规格名，如“星座”","类型":"function","默认值":"`Promise`","备选值":""},"onCreateSKU":{"说明":"创建新的规格值，如“处女座”","类型":"function","默认值":"`Promise`","备选值":""},"onChange":{"说明":"当sku发生改变时的回调，返回值为sku当前value","类型":"function","默认值":"`noop`","备选值":""},"prefix":{"说明":"自定义前缀","类型":"string","默认值":"'rc-sku'","备选值":"null"}},"children":[{"name":"工具方法","content":"为了更方便操作规格数据，SKU组件提供了一些工具方法"},{"name":"SKU.flatten(sku, items, options)","content":{"sku":{"说明":"当前选中规格的value","类型":"array","默认值":"`[]`","备选值":""},"items":{"说明":"当前已存在的数据","类型":"array","默认值":"`[]`","备选值":""},"options":{"说明":"可配置参数","类型":"object","默认值":"`{}`","备选值":"`optionValue: 'id', optionText: 'text'`"}},"info":"通过计算笛卡尔积，将树形的value变成扁平的数组"}]}]},{"name":"Slider 滑动输入条","content":"通过拖动、点击 `Slider` 组件选择数值","children":[{"name":"使用指南","content":"- 可设置单滑块或者双滑块\n- 可与 `Input` 输入框配合使用"},{"name":"API","content":{"value":{"说明":"输入值","类型":"[number,array]","默认值":"0","备选值":"[0,0]","是否必填":"是"},"onChange":{"说明":"change 事件","类型":"func(e:Event)","默认值":"","备选值":"","是否必填":"否"},"range":{"说明":"是否选择范围","类型":"bool","默认值":"false","备选值":"","是否必填":"否"},"max":{"说明":"最大范围","类型":"number","默认值":"100","备选值":"50","是否必填":"否"},"min":{"说明":"最小范围","类型":"number","默认值":"0","备选值":"-100","是否必填":"否"},"step":{"说明":"间隔","类型":"number","默认值":"1","备选值":"","是否必填":"否"},"withInput":{"说明":"是否带输入框","类型":"bool","默认值":"true","备选值":"","是否必填":"否"},"dots":{"说明":"是否只能在标签值中选择","类型":"bool","默认值":"true","备选值":"","是否必填":"否"},"marks":{"说明":"标签值","类型":"object","默认值":"","备选值":"","是否必填":"否"},"disabled":{"说明":"是否禁用","类型":"bool","默认值":"`false`","备选值":"","是否必填":"否"},"className":{"说明":"自定义额外类名","类型":"string","默认值":"`''`","备选值":"","是否必填":"否"},"width":{"说明":"宽度","类型":"string or number","默认值":"","备选值":"","是否必填":"否"},"prefix":{"说明":"自定义类前缀","类型":"string","默认值":"`'zent'`","备选值":"","是否必填":"否"}},"info":"⚠️注意：`range` 属性设置了必须给一个 `value` 值，且一定为一个长度为2的数组，数组项必须为数字。`dots` 属性配合 `marks` 属性使用。"}]},{"name":"Steps 步骤条","content":"步骤条组件，适用于需分步引导的操作。","children":[{"name":"API","content":"","children":[{"name":"Steps","content":{"type":{"说明":"steps组件类型","类型":"string","默认值":"`'number'`","备选值":"`'card'`,  `'breadcrumb'`"},"current":{"说明":"指定当前步骤, 从 1 开始记数 (当不传值时, 默认为 0, 状态都为 wait)","类型":"number","默认值":"`0`","备选值":""},"status":{"说明":"步骤条的状态","类型":"string","默认值":"`'finish'`","备选值":"`'wait'`, `'error'`"},"sequence":{"说明":"是否使用默认的步骤序号 (针对card, breadcrumb类型)","类型":"boolean","默认值":"`true`","备选值":""},"onStepChange":{"说明":"传该参数后step可点击切换 (针对card, breadcrumb类型)","类型":"func","默认值":"`''`","备选值":""},"className":{"说明":"自定义额外类名","类型":"string","默认值":"`''`","备选值":""},"prefix":{"说明":"自定义前缀","类型":"string","默认值":"`'zent'`","备选值":""}}},{"name":"Steps.Step","content":{"title":{"说明":"标题","类型":"node"},"description":{"说明":"步骤的详情描述 (card, breadcrumb 类型不支持该属性)","类型":"node"}},"info":"步骤条的每一个子项"}]},{"name":"已知问题","content":"尚未处理步骤条只存在一项的边界情况。(当只有一项时不应该使用 steps)"}]},{"name":"Sweetalert 快捷对话框","content":"快速唤起 Dialog 组件","children":[{"name":"使用指南","content":"-  组件不提供个性化选项，如有需要请使用 Dialog 组件。"},{"name":"API","content":"","children":[{"name":"alert","content":{"content":{"说明":"弹窗中的内容","类型":"node","默认值":"","备选值":""},"type":{"说明":"弹窗的类型, 设置会在title左边显示一个小图标, 不传不会显示图标","类型":"string","默认值":"-","备选值":"`'info'`, `'success'`, `'error'`, `'warning'`"},"title":{"说明":"弹窗的标题","类型":"node","默认值":"`''`","备选值":""},"onConfirm":{"说明":"确定操作回调函数","类型":"func","默认值":"`noop`","备选值":""},"confirmText":{"说明":"确定按钮文案","类型":"string","默认值":"`'取消'`","备选值":""},"confirmType":{"说明":"确定按钮的类型","类型":"string","默认值":"`'primary'`","备选值":"`'default'`、`'primary'`、`'danger'`、`'success'`"},"className":{"说明":"额外的className","类型":"string","默认值":"`''`","备选值":""},"prefix":{"说明":"默认className的前缀","类型":"string","默认值":"`'zent'`","备选值":""}}},{"name":"confirm","content":{"content":{"说明":"弹窗中的内容","类型":"node","默认值":"","备选值":""},"type":{"说明":"弹窗的类型, 设置会在title左边显示一个小图标, 不传不会显示图标","类型":"string","默认值":"-","备选值":"`'info'`, `'success'`, `'error'`, `'warning'`"},"title":{"说明":"弹窗的标题","类型":"node","默认值":"`''`","备选值":""},"onCancel":{"说明":"取消操作回调函数","类型":"func","默认值":"`noop`","备选值":""},"onConfirm":{"说明":"确定操作回调函数","类型":"func","默认值":"`noop`","备选值":""},"cancelText":{"说明":"取消按钮文案","类型":"string","默认值":"`'取消'`","备选值":""},"confirmText":{"说明":"确定按钮文案","类型":"string","默认值":"`'确定'`","备选值":""},"confirmType":{"说明":"确定按钮的类型","类型":"string","默认值":"`'primary'`","备选值":"`'default'`、`'primary'`、`'danger'`、`'success'`"},"className":{"说明":"额外的className","类型":"string","默认值":"`''`","备选值":""},"prefix":{"说明":"默认className的前缀","类型":"string","默认值":"`'zent'`","备选值":""}},"info":"- `Sweetalert.alert` 和 `Sweetalert.confirm` 的返回值是可以用来手动关闭对话框的函数。\n- 如果 `onConfirm` 的返回值是 `Promise`, 对应的按钮会在 `Promise` pending 时保持在 loading 状态；如果 `Promise` reject，对话框不会关闭，如果 `Promise` resolve 对话框关闭。\n- 如果 `onConfirm` 没有参数并且返回值是 `false` 对话框不会关闭。\n- 如果 `onConfirm` 有一个参数的话，需要手动调用 `close` 这个参数来关闭对话框。"}]}]},{"name":"Swiper 轮播","content":"Swiper 主要用于对一组平级内容进行轮播展示","children":[{"name":"API","content":{"transitionDuration":{"说明":"切换动画持续时间(ms)","类型":"number","默认值":"`300`","备选值":""},"autoplay":{"说明":"是否自动切换","类型":"bool","默认值":"`false`","备选值":"`false`, `true`"},"autoplayInterval":{"说明":"自动切换间隔时间(ms)","类型":"number","默认值":"`3000`","备选值":""},"dots":{"说明":"是否显示下方翻页按钮","类型":"bool","默认值":"`true`","备选值":"`true`, `false`"},"dotsColor":{"说明":"下方翻页按钮颜色","类型":"string","默认值":"`'black'`","备选值":"`'blue'`, `'red'`, `'green'`, `自定义css颜色值`"},"dotsSize":{"说明":"下方翻页按钮大小","类型":"string","默认值":"`'normal'`","备选值":"`'small'`, `'large'`"},"arrows":{"说明":"是否显示两侧翻页按钮","类型":"bool","默认值":"`false`","备选值":"`true`, `false`"},"arrowsType":{"说明":"两侧箭头颜色","类型":"string","默认值":"`'dark'`","备选值":"`'dark'`, `'light'`"},"onChange":{"说明":"切换时回调函数","类型":"(current: number, prev: number): void","默认值":"`noop`","备选值":""},"className":{"说明":"自定义额外类名","类型":"string","默认值":"`''`","备选值":""},"prefix":{"说明":"自定义前缀","类型":"string","默认值":"`'zent'`","备选值":""}},"children":[{"name":"实例方法","content":{"swipeTo":{"说明":"手动切换轮播图","参数名":"index","参数描述":"需要切换的轮播图索引,从0开始"},"prev":{"说明":"切换至上一张轮播图","参数名":"","参数描述":""},"next":{"说明":"切换至下一张轮播图","参数名":"","参数描述":""}}}]}]},{"name":"Switch 开关","content":"开关选择器。","children":[{"name":"使用指南","content":"-  需要表示开关状态/两种状态之间的切换时。\n-  切换 `Switch` 会直接触发状态改变。"},{"name":"API","content":{"checked":{"说明":"指定当前状态","类型":"bool","默认值":"","备选值":""},"onChange":{"说明":"变化时回调函数, 参数是改变后的 `checked` 值","类型":"func(checked: bool)","默认值":"`noop`","备选值":""},"disabled":{"说明":"状态控制","类型":"bool","默认值":"`false`","备选值":"`true`"},"checkedText":{"说明":"选中时的文案","类型":"string","默认值":"`'开启'`","备选值":""},"uncheckedText":{"说明":"未选中时的文案","类型":"string","默认值":"`'关闭'`","备选值":""},"loading":{"说明":"加载中状态","类型":"bool","默认值":"`false`","备选值":"`true`"},"size":{"说明":"开关大小","类型":"string","默认值":"`'default'`","备选值":"`'small'`"},"className":{"说明":"自定义额外类名","类型":"string","默认值":"`''`","备选值":""},"prefix":{"说明":"自定义前缀","类型":"string","默认值":"`'zent'`","备选值":""}}}]},{"name":"Table 表格（列表）","content":"表格组件","children":[{"name":"使用指南","content":"表格中的页面筛选、排序均会触发 `onChange` 函数"},{"name":"API","content":{"columns":{"说明":"每一列需要的所有数据","类型":"array[object]","默认值":"","备选值":"","是否必须":"是"},"datasets":{"说明":"每一行需要展示的数据","类型":"array[object]","默认值":"","备选值":"","是否必须":"是"},"rowKey":{"说明":"每一行的key, 让react提升性能, 并防止出现一系列的问题","类型":"string","默认值":"`id`","备选值":"","是否必须":"否"},"sortBy":{"说明":"根据哪一个字段排序, 应该等于columns中某一个元素的`key`字段","类型":"string","默认值":"","备选值":"","是否必须":"否"},"sortType":{"说明":"排序方式","类型":"string","默认值":"`'desc'`","备选值":"`'asc'`","是否必须":"否"},"onChange":{"说明":"列表发生变化时自动触发的函数，页面筛选、排序均会触发","类型":"func","默认值":"","备选值":"","是否必须":"否"},"emptyLabel":{"说明":"列表为空时的提示文案","类型":"node","默认值":"`'没有更多数据了'`","备选值":"","是否必须":"否"},"selection":{"说明":"表格的选择功能配置","类型":"object","默认值":"","备选值":"","是否必须":"否"},"loading":{"说明":"表格是否loading状态","类型":"bool","默认值":"`false`","备选值":"","是否必须":"否"},"getRowConf":{"说明":"每一行的配置函数，返回一个配置对象`{ canSelect, rowClass }`","类型":"func","默认值":"","备选值":"","是否必须":"否"},"expandation":{"说明":"展开配置","类型":"object","默认值":"","备选值":"","是否必须":"否"},"batchComponents":{"说明":"批量操作的组件列表，如何使用，看批量操作的示例","类型":"array[html/function/React Component]","默认值":"`null`","备选值":"","是否必须":"否"},"batchComponentsAutoFixed":{"说明":"是否要自动fix批量操作","类型":"bool","默认值":"`true`","备选值":"","是否必须":"否"},"autoStick":{"说明":"是否自动将head stick到窗口","类型":"bool","默认值":"`false`","备选值":"","是否必须":"否"},"autoScroll":{"说明":"是否点击分页自动滚到table顶部","类型":"boll","默认值":"`false`","备选值":"","是否必须":"否"},"className":{"说明":"自定义额外类名","类型":"string","默认值":"`''`","备选值":"","是否必须":"否"},"prefix":{"说明":"自定义前缀","类型":"string","默认值":"`'zent'`","备选值":"","是否必须":"否"},"pageInfo":{"说明":"table对应的分页信息","类型":"object","默认值":"`null`","备选值":"","是否必须":"否"}},"children":[{"name":"getRowConf的特别声明：","content":"```jsx\n\n  /*\n  * @param data {Object} 每一行的数据\n  * @param index {number} 每一行在列表中的index\n  * @return {\n  *  canSelect {bool} 是否可选，默认为true\n  *  rowClass {string} 这一行的特殊class，默认是空字符串\n  * }\n  */\n  getRowConf(data, index) { // 每一行的数据和这一行在列表中的index\n    return {\n      canSelect: index % 2 === 0,\n      rowClass: `row-${index}`\n    }\n  }\n\n```"},{"name":"onChange函数声明","content":"onChange会抛出一个对象，这个对象包含分页变化和排序的的参数：\n\n```js\n{\n\tsortBy, // {String} 表示基于什么key进行排序\n\tsortType, // {String} ['asc', 'desc'] 排序的方式\n\tcurrent, // {Number} 表示当前第几页\n}\n```"},{"name":"columns","content":{"title":{"说明":"每一列显示在thead上的名称","类型":"node","默认值":"","是否必须":"否"},"name":{"说明":"每一列的主键, 影响到排序和筛选","类型":"string","默认值":"","是否必须":"否"},"width":{"说明":"每一列在一行的宽度, 相对值和固定值 (如: 20% 或 100px)","类型":"string","默认值":"","是否必须":"否"},"isMoney":{"说明":"表示是否是金额","类型":"bool","默认值":"`false`","是否必须":"否"},"needSort":{"说明":"这一列是否支持排序, 这一列必须设置了key, 才能正常使用排序功能","类型":"bool","默认值":"`false`","是否必须":"否"},"bodyRender":{"说明":"这一列对应用来渲染的组件","类型":"node","默认值":"","是否必须":"","undefined":"否"},"textAlign":{"说明":"文本对齐方式","类型":"string","默认值":"`''`","是否必须":"否"}}},{"name":"selection","content":{"selectedRowKeys":{"说明":"默认选中","类型":"array","默认值":"","是否必须":"否"},"isSingleSelection":{"说明":"是否是单选","类型":"bool","默认值":"`false`","是否必须":"否"},"needCrossPage":{"说明":"是否需要跨页的时候多选","类型":"bool","默认值":"`false`","是否必须":"否"},"onSelect(@selectedkeys, @selectedRows, @currentRow)":{"说明":"每次check的时候触发的函数","类型":"func","默认值":"","是否必须":"否"}}},{"name":"pageInfo","content":{"totalItem":{"说明":"总条目个数","类型":"number","默认值":"`0`","是否必须":"否"},"pageSize":{"说明":"每页个数","类型":"number","默认值":"","是否必须":"否"},"current":{"说明":"当前页码","类型":"number","默认值":"","是否必须":""},"maxPageToShow":{"说明":"最多可显示的个数","类型":"number","默认值":"","是否必须":"否"},"total":{"说明":"总条目个数**[deprecated]**","类型":"number","默认值":"`0`","是否必须":"否"},"limit":{"说明":"每页个数**[deprecated]**","类型":"number","默认值":"","是否必须":"否"}}},{"name":"expandation","content":{"isExpanded":{"说明":"是否展开当前行","类型":"bool","默认值":"`false`","是否必须":"否"},"expandRender":{"说明":"展开行的补充内容render","类型":"func","默认值":"","是否必须":"否"}}}]}]},{"name":"Tabs 选项卡组件","content":"选项卡组件","children":[{"name":"API","content":"","children":[{"name":"Tabs","content":{"activeId":{"说明":"激活的tab-id","类型":"string","默认值":"","备选值":"","是否必须":"是"},"type":{"说明":"tabs组件类型","类型":"string","默认值":"`'normal'`","备选值":"`'card'`, `'slider'`","是否必须":"否"},"size":{"说明":"tabs的尺寸类型","类型":"string","默认值":"`'normal'`","备选值":"`'huge'`","是否必须":"否"},"align":{"说明":"tabs的布局类型","类型":"string","默认值":"`'left'`","备选值":"`'right'`, `'center'`","是否必须":"否"},"onTabChange":{"说明":"选中的tab改变时","类型":"func(id)","默认值":"","备选值":"","是否必须":"否"},"onTabDel":{"说明":"关闭tab时","类型":"func(id)","默认值":"","备选值":"","是否必须":"否"},"onTabAdd":{"说明":"点击增加tab时","类型":"func","默认值":"","备选值":"","是否必须":"否"},"candel":{"说明":"是否可删除","类型":"bool","默认值":"`false`","备选值":"","是否必须":"否"},"canadd":{"说明":"是否可增加tab","类型":"bool","默认值":"`false`","备选值":"","是否必须":"否"},"tabs":{"说明":"不使用Panel时的标签列表","类型":"Array","默认值":"`null`","备选值":"","是否必须":"否"},"className":{"说明":"自定义额外类名","类型":"string","默认值":"`''`","备选值":"","是否必须":"否"},"prefix":{"说明":"自定义前缀","类型":"string","默认值":"`'zent'`","备选值":"","是否必须":"否"},"key: string":{"说明":"number, // 同TabPanel id"},"title: string":{"说明":"number, // 同TabPanel tab"}},"info":"tabs参数类型：\n```ts\nArray<{\n\tdisabled?: boolean // 同TabPanel disabled\n}>\n\n```"},{"name":"TabPanel","content":{"tab":{"说明":"该TabPanel所对应的tab标签的名字","类型":"string","是否必须":"是"},"id":{"说明":"该TabPanel的id","类型":"string","是否必须":"是"},"disabled":{"说明":"该TabPanel是否被禁用","类型":"bool","是否必须":"否"}}}]}]},{"name":"Tag 标签","content":"标签用于进行标记和分类。","children":[{"name":"使用指南","content":"-  用于添加特殊标记或者分类记号。\n-  可添加多个标签。\n-  标签内字数建议不超过四个字。"},{"name":"API","content":{"color":{"说明":"标签颜色","类型":"string","默认值":"`'red'`","备选值":"`'red'` \\","undefined":"`'darkgreen'`"},"outline":{"说明":"边框有颜色，无底色","类型":"bool","默认值":"`'false'`","备选值":"`true` \\","undefined":"`false`"},"rounded":{"说明":"是否有圆角","类型":"bool","默认值":"`true`","备选值":"`true` \\","undefined":"`false`"},"closable":{"说明":"是否可以关闭","类型":"bool","默认值":"`false`","备选值":"`true` \\","undefined":"`false`"},"onClose":{"说明":"关闭时的回调","类型":"func","默认值":"`noop`","备选值":""},"borderColor":{"说明":"边框颜色","类型":"string","默认值":"","备选值":""},"bgColor":{"说明":"背景颜色","类型":"string","默认值":"","备选值":""},"fontColor":{"说明":"文字颜色","类型":"string","默认值":"","备选值":""},"className":{"说明":"自定义额外类名","类型":"string","默认值":"`''`","备选值":""},"prefix":{"说明":"自定义前缀","类型":"string","默认值":"`'zent'`","备选值":""}}}]},{"name":"Tree 树","content":"树形控件，展示文件结构、组织架构、地理信息等分层数据的控件。","children":[{"name":"使用指南","content":"-  支持两种数据格式，递归树形结构和单层列表结构。\n-  组件展示对应传入的data属性，内部不会改变data，具体请看自定义操作的例子。"},{"name":"API","content":"","children":[{"name":"Tree","content":{"dataType":{"说明":"数据类型, 默认为tree类型","类型":"string","默认值":"`'tree'`","备选值":"`'plain'`"},"data":{"说明":"必填, 实际传入的数据, 根据dataType进行识别","类型":"array","默认值":"","备选值":""},"render":{"说明":"自定义树条目渲染方法, 传入参数为该节点数据 (包含子树)","类型":"func(data)","默认值":"","备选值":""},"operations":{"说明":"自定义操作, 包含 `name`, `icon`, `action`, `shouldRender` 属性","类型":"array[object]","默认值":"","备选值":""},"foldable":{"说明":"是否支持点击条目时展开与收起动作","类型":"bool","默认值":"`true`","备选值":""},"checkable":{"说明":"是否支持checkbox选择","类型":"bool","默认值":"`true`","备选值":""},"onCheck":{"说明":"点击checkbox的回调函数, 传入包含所有点击节点id数组","类型":"func(data)","默认值":"","备选值":""},"defaultCheckedKeys":{"说明":"默认选中节点id数组","类型":"array","默认值":"","备选值":""},"disabledCheckedKeys":{"说明":"默认禁选节点id数组","类型":"array","默认值":"","备选值":""},"size":{"说明":"大小","类型":"string","默认值":"`'medium'`","备选值":"`'small'`, `'large'`"},"commonStyle":{"说明":"设置整个tree的外层style","类型":"object","默认值":"","备选值":""},"expandAll":{"说明":"是否展开所有节点","类型":"bool","默认值":"`false`","备选值":""},"onExpand":{"说明":"展开节点之后的回调函数","类型":"func(data, config)","默认值":"","备选值":""},"autoExpandOnSelect":{"说明":"点击节点是否展开","类型":"bool","默认值":"`true`","备选值":""},"onSelect":{"说明":"选择树的一个节点的回调函数","类型":"func(data, target)","默认值":"","备选值":""},"isRoot":{"说明":"plain数据类型，判断节点是否为根节点的api","类型":"func(node)","默认值":"","备选值":""}}},{"name":"data","content":{"id":{"说明":"必填, 数据的唯一标识","类型":"number/string","默认值":"","备选值":""},"title":{"说明":"必填, 显示内容","类型":"string","默认值":"","备选值":""},"children":{"说明":"子树 (`dataType=\"tree\"` 时生效)","类型":"array[object]","默认值":"","备选值":""},"parentId":{"说明":"父节点Id (`dataType=\"plain\"` 时生效), 根节点为0或不定义","类型":"number/string","默认值":"","备选值":""},"expand":{"说明":"是否展开","类型":"bool","默认值":"`false`","备选值":""},"isLeaf":{"说明":"是否叶子节点","类型":"bool","默认值":"`false`","备选值":""}},"info":"可在每个节点任意添加初下列属性之外的key-value，回调函数中会拿到用户传入的完整数据。"},{"name":"operations","content":{"name":{"说明":"必填，显示内容","类型":"string","默认值":"","备选值":""},"icon":{"说明":"显示icon的className, 或ReactNode","类型":"string／ReactNode","默认值":"","备选值":""},"action":{"说明":"必填，点击回调函数，参数为子树信息","类型":"func(data)","默认值":"","备选值":""},"shouldRender":{"说明":"是否更新，返回true/false","类型":"func(data)","默认值":"`true`","备选值":""}}}]}]},{"name":"Upload 图片上传","content":"图片上传","children":[{"name":"API","content":{"localOnly":{"说明":"是否只支持本地图片","类型":"boolean","默认值":"`false`","是否必填":"否"},"tips":{"说明":"提示文案","类型":"string","默认值":"`''`","是否必填":"否"},"maxSize":{"说明":"图片大小限制，单位为 byte","类型":"number","默认值":"`1024 * 1024`","是否必填":"否"},"maxAmount":{"说明":"图片数量限制，0为不限制，1为只支持单文件","类型":"number","默认值":"`0`","是否必填":"否"},"accept":{"说明":"支持文件类型","类型":"string","默认值":"`'image/gif, image/jpeg, image/png'`","是否必填":"否"},"silent":{"说明":"是否开启静默模式，不会提示成功/失败","类型":"boolean","默认值":"`false`","是否必填":"否"},"triggerInline":{"说明":"是否行内属性","类型":"boolean","默认值":"`false`","是否必填":"否"},"onFetch":{"说明":"提取网络图片","类型":"function","默认值":"`noop`","是否必填":"否"},"onUpload":{"说明":"上传本地图片","类型":"function","默认值":"`noop`","是否必填":"否"},"onProgress":{"说明":"上传进度","类型":"function","默认值":"`noop`","是否必填":"否"},"filterFiles":{"说明":"过滤文件，支持同步和promise的方式","类型":"function","默认值":"`noop`","是否必填":"否"},"auto":{"说明":"是否自动弹出","类型":"boolean","默认值":"`false`","是否必填":"否"},"triggerClassName":{"说明":"重写trigger样式","类型":"string","默认值":"`'zent-upload-trigger'`","是否必填":"否"},"prefix":{"说明":"前缀命名空间","类型":"string","默认值":"`'zent'`","是否必填":"否"},"withoutPopup":{"说明":"是否不渲染在弹层上","类型":"boolean","默认值":"`false`","是否必填":"否"}}}]}]